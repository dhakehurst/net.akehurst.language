/**
 * Modified from Antlr v4 Optimised JavaParser.v4 file.
 */

/*
 * [The "BSD license"]
 *  Copyright (c) 2014 Terence Parr
 *  Copyright (c) 2014 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * A Java 8 grammar for ANTLR 4 derived from the Java Language Specification
 * chapter 19.
 *
 * NOTE: This grammar results in a generated parser that is much slower
 *       than the Java 7 grammar in the grammars-v4/java directory. This
 *     one is, however, extremely close to the spec.
 *
 * You can test with
 *
 *  $ antlr4 Java8.g4
 *  $ javac *.java
 *  $ grun Java8 compilationUnit *.java
 *
 * Or,
~/antlr/code/grammars-v4/java8 $ java Test .
/Users/parrt/antlr/code/grammars-v4/java8/./Java8BaseListener.java
/Users/parrt/antlr/code/grammars-v4/java8/./Java8Lexer.java
/Users/parrt/antlr/code/grammars-v4/java8/./Java8Listener.java
/Users/parrt/antlr/code/grammars-v4/java8/./Java8Parser.java
/Users/parrt/antlr/code/grammars-v4/java8/./Test.java
Total lexer+parser time 30844ms.
 */
 
namespace test
 
grammar Java8OptmAntlr {

// Keywords

leaf ABSTRACT=           'abstract';
leaf ASSERT=             'assert';
leaf BOOLEAN=            'boolean';
leaf BREAK=              'break';
leaf BYTE=               'byte';
leaf CASE=               'case';
leaf CATCH=              'catch';
leaf CHAR=               'char';
leaf CLASS=              'class';
leaf CONST=              'const';
leaf CONTINUE=           'continue';
leaf DEFAULT=            'default';
leaf DO=                 'do';
leaf DOUBLE=             'double';
leaf ELSE=               'else';
leaf ENUM=               'enum';
leaf EXTENDS=            'extends';
leaf FINAL=              'final';
leaf FINALLY=            'finally';
leaf FLOAT=              'float';
leaf FOR=                'for';
leaf IF=                 'if';
leaf GOTO=               'goto';
leaf IMPLEMENTS=         'implements';
leaf IMPORT=             'import';
leaf INSTANCEOF=         'instanceof';
leaf INT=                'int';
leaf INTERFACE=          'interface';
leaf LONG=               'long';
leaf NATIVE=             'native';
leaf NEW=                'new';
leaf PACKAGE=            'package';
leaf PRIVATE=            'private';
leaf PROTECTED=          'protected';
leaf PUBLIC=             'public';
leaf RETURN=             'return';
leaf SHORT=              'short';
leaf STATIC=             'static';
leaf STRICTFP=           'strictfp';
leaf SUPER=              'super';
leaf SWITCH=             'switch';
leaf SYNCHRONIZED=       'synchronized';
leaf THIS=               'this';
leaf THROW=              'throw';
leaf THROWS=             'throws';
leaf TRANSIENT=          'transient';
leaf TRY=                'try';
leaf VOID=               'void';
leaf VOLATILE=           'volatile';
leaf WHILE=              'while';

// Literals

leaf DECIMAL_LITERAL=    "(0|[1-9]([0-9_]*[0-9])?)";
leaf HEX_LITERAL=        "0[xX][0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[lL]?";
leaf OCT_LITERAL=        "0_*[0-7]([0-7_]*[0-7])?[lL]?";
leaf BINARY_LITERAL=     "0[bB][01]([01_]*[01])?[lL]?";
leaf FLOAT_LITERAL=		"(((0|([1-9](0|[1-9])*)).(0|[1-9])*|.(0|[1-9])+ )([eE][+-]?(0|[1-9])+)?)|((0|N(0|[1-9]))([eE][+-]?(0|[1-9])+))";

leaf HEX_FLOAT_LITERAL=  '0' "[xX]" (HexDigits '.'? | HexDigits? '.' HexDigits) "[pP]" "[+-]"? Digits "[fFdD]"?;

leaf BOOL_LITERAL=       'true' | 'false' ;

leaf CHAR_LITERAL=       '\'' ("[^'\r\n\\]" | EscapeSequence) '\'';

leaf STRING_LITERAL=     "\"(\\?.)*\"" ;

leaf NULL_LITERAL=       'null';

// Separators

leaf LPAREN=             '(';
leaf RPAREN=             ')';
leaf LBRACE=             '{';
leaf RBRACE=             '}';
leaf LBRACK=             '[';
leaf RBRACK=             ']';
leaf SEMI=               ';';
leaf COMMA=              ',';
leaf DOT=                '.';

// Operators

leaf ASSIGN=             '=';
leaf GT=                 '>';
leaf LT=                 '<';
leaf BANG=               '!';
leaf TILDE=              '~';
leaf QUESTION=           '?';
leaf COLON=              ':';
leaf EQUAL=              '==';
leaf LE=                 '<=';
leaf GE=                 '>=';
leaf NOTEQUAL=           '!=';
leaf AND=                '&&';
leaf OR=                 '||';
leaf INC=                '++';
leaf DEC=                '--';
leaf ADD=                '+';
leaf SUB=                '-';
leaf MUL=                '*';
leaf DIV=                '/';
leaf BITAND=             '&';
leaf BITOR=              '|';
leaf CARET=              '^';
leaf MOD=                '%';

leaf ADD_ASSIGN=         '+=';
leaf SUB_ASSIGN=         '-=';
leaf MUL_ASSIGN=         '*=';
leaf DIV_ASSIGN=         '/=';
leaf AND_ASSIGN=         '&=';
leaf OR_ASSIGN=          '|=';
leaf XOR_ASSIGN=         '^=';
leaf MOD_ASSIGN=         '%=';
leaf LSHIFT_ASSIGN=      '<<=';
leaf RSHIFT_ASSIGN=      '>>=';
leaf URSHIFT_ASSIGN=     '>>>=';

// Java 8 tokens

leaf ARROW=              '->';
leaf COLONCOLON=         '::';

// Additional symbols not defined in the lexical specification

leaf AT=                 '@';
leaf ELLIPSIS=           '...';

// Whitespace and comments

skip WS  =  "[ \t\r\n\u000C]+";
skip COMMENT =   "/\*[^*]*\*+([^*/][^*]*\*+)*/" ;
skip LINE_COMMENT =   "//[^\n]*$" ;

// Identifiers

leaf IDENTIFIER=	"([a-zA-Z$_]|[^\u0000-\u00FF\uD800-\uDBFF]|([\uD800-\uDBFF][\uDC00-\uDFFF]))([a-zA-Z0-9$_]|[^\u0000-\u00FF\uD800-\uDBFF]|([\uD800-\uDBFF][\uDC00-\uDFFF]))*" ;

// Fragment rules
EscapeSequence
    = '\\' "[btnfr\x22'\\]"
    | '\\' ("[0-3]"? "[0-7]")? "[0-7]"
    | '\\' 'u'+ HexDigit HexDigit HexDigit HexDigit
    ;

HexDigits
    = HexDigit ((HexDigit | '_')* HexDigit)?
    ;

HexDigit
    = "[0-9a-fA-F]"
    ;

Digits = "[0-9]([0-9_]*[0-9])?" ;



compilationUnit
    = packageDeclaration? importDeclaration* typeDeclaration*
    ;

packageDeclaration
    = annotation* PACKAGE qualifiedName ';'
    ;

importDeclaration
    = IMPORT STATIC? qualifiedName ('.' '*')? ';'
    ;

typeDeclaration
    = classOrInterfaceModifier*
      (classDeclaration | enumDeclaration | interfaceDeclaration | annotationTypeDeclaration)
    | ';'
    ;

modifier
    = classOrInterfaceModifier
    | NATIVE
    | SYNCHRONIZED
    | TRANSIENT
    | VOLATILE
    ;

classOrInterfaceModifier
    = annotation
    | PUBLIC
    | PROTECTED
    | PRIVATE
    | STATIC
    | ABSTRACT
    | FINAL    // FINAL for class only -- does not apply to interfaces
    | STRICTFP
    ;

variableModifier
    = FINAL
    | annotation
    ;

classDeclaration
    = CLASS IDENTIFIER typeParameters?
      (EXTENDS typeType)?
      (IMPLEMENTS typeList)?
      classBody
    ;

typeParameters
    = '<' typeParameter (',' typeParameter)* '>'
    ;

typeParameter
    = annotation* IDENTIFIER (EXTENDS typeBound)?
    ;

typeBound
    = typeType ('&' typeType)*
    ;

enumDeclaration
    = ENUM IDENTIFIER (IMPLEMENTS typeList)? '{' enumConstants? ','? enumBodyDeclarations? '}'
    ;

enumConstants
    = enumConstant (',' enumConstant)*
    ;

enumConstant
    = annotation* IDENTIFIER arguments? classBody?
    ;

enumBodyDeclarations
    = ';' classBodyDeclaration*
    ;

interfaceDeclaration
    = INTERFACE IDENTIFIER typeParameters? (EXTENDS typeList)? interfaceBody
    ;

classBody
    = '{' classBodyDeclaration* '}'
    ;

interfaceBody
    = '{' interfaceBodyDeclaration* '}'
    ;

classBodyDeclaration
    = ';'
    | STATIC? block
    | modifier* memberDeclaration
    ;

memberDeclaration
    = methodDeclaration
    | genericMethodDeclaration
    | fieldDeclaration
    | constructorDeclaration
    | genericConstructorDeclaration
    | interfaceDeclaration
    | annotationTypeDeclaration
    | classDeclaration
    | enumDeclaration
    ;

/* We use rule this even for void methods which cannot have [] after parameters.
   This simplifies grammar and we can consider void to be a type, which
   renders the [] matching as a context-sensitive issue or a semantic check
   for invalid return type after parsing.
 */
methodDeclaration
    = typeTypeOrVoid IDENTIFIER formalParameters ('[' ']')*
      (THROWS qualifiedNameList)?
      methodBody
    ;

methodBody
    = block
    | ';'
    ;

typeTypeOrVoid
    = typeType
    | VOID
    ;

genericMethodDeclaration
    = typeParameters methodDeclaration
    ;

genericConstructorDeclaration
    = typeParameters constructorDeclaration
    ;

constructorDeclaration
    = IDENTIFIER formalParameters (THROWS qualifiedNameList)? block /*constructorBody*/
    ;

fieldDeclaration
    = typeType variableDeclarators ';'
    ;

interfaceBodyDeclaration
    = modifier* interfaceMemberDeclaration
    | ';'
    ;

interfaceMemberDeclaration
    = constDeclaration
    | interfaceMethodDeclaration
    | genericInterfaceMethodDeclaration
    | interfaceDeclaration
    | annotationTypeDeclaration
    | classDeclaration
    | enumDeclaration
    ;

constDeclaration
    = typeType constantDeclarator (',' constantDeclarator)* ';'
    ;

constantDeclarator
    = IDENTIFIER ('[' ']')* '=' variableInitializer
    ;

// see matching of [] comment in methodDeclaratorRest
// methodBody from Java8
interfaceMethodDeclaration
    = interfaceMethodModifier* (typeTypeOrVoid | typeParameters annotation* typeTypeOrVoid)
      IDENTIFIER formalParameters ('[' ']')* (THROWS qualifiedNameList)? methodBody
    ;

// Java8
interfaceMethodModifier
    = annotation
    | PUBLIC
    | ABSTRACT
    | DEFAULT
    | STATIC
    | STRICTFP
    ;

genericInterfaceMethodDeclaration
    = typeParameters interfaceMethodDeclaration
    ;

variableDeclarators
    = variableDeclarator (',' variableDeclarator)*
    ;

variableDeclarator
    = variableDeclaratorId ('=' variableInitializer)?
    ;

variableDeclaratorId
    = IDENTIFIER ('[' ']')*
    ;

variableInitializer
    = arrayInitializer
    | expression
    ;

arrayInitializer
    = '{' (variableInitializer (',' variableInitializer)* (',')? )? '}'
    ;

classOrInterfaceType
    = IDENTIFIER typeArguments? ('.' IDENTIFIER typeArguments?)*
    ;

typeArgument
    = typeType
    | '?' ((EXTENDS | SUPER) typeType)?
    ;

qualifiedNameList
    = qualifiedName (',' qualifiedName)*
    ;

formalParameters
    = '(' formalParameterList? ')'
    ;

formalParameterList
    = formalParameter (',' formalParameter)* (',' lastFormalParameter)?
    | lastFormalParameter
    ;

formalParameter
    = variableModifier* typeType variableDeclaratorId
    ;

lastFormalParameter
    = variableModifier* typeType '...' variableDeclaratorId
    ;

qualifiedName
    = IDENTIFIER ('.' IDENTIFIER)*
    ;

literal
    = integerLiteral
    | floatLiteral
    | CHAR_LITERAL
    | STRING_LITERAL
    | BOOL_LITERAL
    | NULL_LITERAL
    ;

integerLiteral
    = DECIMAL_LITERAL
    | HEX_LITERAL
    | OCT_LITERAL
    | BINARY_LITERAL
    ;

floatLiteral
    = FLOAT_LITERAL
    | HEX_FLOAT_LITERAL
    ;

// ANNOTATIONS

annotation
    = '@' qualifiedName ('(' ( elementValuePairs | elementValue )? ')')?
    ;

elementValuePairs
    = elementValuePair (',' elementValuePair)*
    ;

elementValuePair
    = IDENTIFIER '=' elementValue
    ;

elementValue
    = expression
    | annotation
    | elementValueArrayInitializer
    ;

elementValueArrayInitializer
    = '{' (elementValue (',' elementValue)*)? (',')? '}'
    ;

annotationTypeDeclaration
    = '@' INTERFACE IDENTIFIER annotationTypeBody
    ;

annotationTypeBody
    = '{' (annotationTypeElementDeclaration)* '}'
    ;

annotationTypeElementDeclaration
    = modifier* annotationTypeElementRest
    | ';' // this is not allowed by the grammar, but apparently allowed by the actual compiler
    ;

annotationTypeElementRest
    = typeType annotationMethodOrConstantRest ';'
    | classDeclaration ';'?
    | interfaceDeclaration ';'?
    | enumDeclaration ';'?
    | annotationTypeDeclaration ';'?
    ;

annotationMethodOrConstantRest
    = annotationMethodRest
    | annotationConstantRest
    ;

annotationMethodRest
    = IDENTIFIER '(' ')' defaultValue?
    ;

annotationConstantRest
    = variableDeclarators
    ;

defaultValue
    = DEFAULT elementValue
    ;

// STATEMENTS / BLOCKS

block
    = '{' blockStatement* '}'
    ;

blockStatement
    = localVariableDeclaration ';'
    | statement
    | localTypeDeclaration
    ;

localVariableDeclaration
    = variableModifier* typeType variableDeclarators
    ;

localTypeDeclaration
    = classOrInterfaceModifier*
      (classDeclaration | interfaceDeclaration)
    | ';'
    ;

statement
    = block
    | ASSERT expression (':' expression)? ';'
    | IF parExpression statement (ELSE statement)?
    | FOR '(' forControl ')' statement
    | WHILE parExpression statement
    | DO statement WHILE parExpression ';'
    | TRY block (catchClause+ finallyBlock? | finallyBlock)
    | TRY resourceSpecification block catchClause* finallyBlock?
    | SWITCH parExpression '{' switchBlockStatementGroup* switchLabel* '}'
    | SYNCHRONIZED parExpression block
    | RETURN expression? ';'
    | THROW expression ';'
    | BREAK IDENTIFIER? ';'
    | CONTINUE IDENTIFIER? ';'
    | SEMI
    | expression ';'
    | IDENTIFIER ':' statement
    ;

catchClause
    = CATCH '(' variableModifier* catchType IDENTIFIER ')' block
    ;

catchType
    = qualifiedName ('|' qualifiedName)*
    ;

finallyBlock
    = FINALLY block
    ;

resourceSpecification
    = '(' resources ';'? ')'
    ;

resources
    = resource (';' resource)*
    ;

resource
    = variableModifier* classOrInterfaceType variableDeclaratorId '=' expression
    ;

/** Matches cases then statements, both of which are mandatory.
 *  To handle empty cases at the end, we add switchLabel* to statement.
 */
switchBlockStatementGroup
    = switchLabel+ blockStatement+
    ;

switchLabel
    = CASE (expression | IDENTIFIER) ':'
    | DEFAULT ':'
    ;

forControl
    = enhancedForControl
    | forInit? ';' expression? ';' expressionList?
    ;

forInit
    = localVariableDeclaration
    | expressionList
    ;

enhancedForControl
    = variableModifier* typeType variableDeclaratorId ':' expression
    ;

// EXPRESSIONS

parExpression
    = '(' expression ')'
    ;

expressionList
    = expression (',' expression)*
    ;

expression
    = primary
    | expression '.'
      (IDENTIFIER
      | THIS
      | NEW nonWildcardTypeArguments? innerCreator
      | SUPER superSuffix
      | explicitGenericInvocation
      )
    | expression '[' expression ']'
    | expression '(' expressionList? ')'
    | NEW creator
    | '(' typeType ')' expression
    | expression ('++' | '--')
    | ('+'|'-'|'++'|'--') expression
    | ('~'|'!') expression
    | expression ('*'|'/'|'%') expression
    | expression ('+'|'-') expression
    | expression ('<' '<' | '>' '>' '>' | '>' '>') expression
    | expression ('<=' | '>=' | '>' | '<') expression
    | expression INSTANCEOF typeType
    | expression ('==' | '!=') expression
    | expression '&' expression
    | expression '^' expression
    | expression '|' expression
    | expression '&&' expression
    | expression '||' expression
    | expression '?' expression ':' expression
    | expression
      ('=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '>>=' | '>>>=' | '<<=' | '%=')
      expression
    | lambdaExpression // Java8

    // Java 8 methodReference
    | expression '::' typeArguments? IDENTIFIER
    | typeType '::' (typeArguments? IDENTIFIER | NEW)
    | classType '::' typeArguments? NEW
    ;

// Java8
lambdaExpression
    = lambdaParameters '->' lambdaBody
    ;

// Java8
lambdaParameters
    = IDENTIFIER
    | '(' formalParameterList? ')'
    | '(' IDENTIFIER (',' IDENTIFIER)* ')'
    ;

// Java8
lambdaBody
    = expression
    | block
    ;

primary
    = '(' expression ')'
    | THIS
    | SUPER
    | literal
    | IDENTIFIER
    | typeTypeOrVoid '.' CLASS
    | nonWildcardTypeArguments (explicitGenericInvocationSuffix | THIS arguments)
    ;

classType
    = (classOrInterfaceType '.')? annotation* IDENTIFIER typeArguments?
    ;

creator
    = nonWildcardTypeArguments createdName classCreatorRest
    | createdName (arrayCreatorRest | classCreatorRest)
    ;

createdName
    = IDENTIFIER typeArgumentsOrDiamond? ('.' IDENTIFIER typeArgumentsOrDiamond?)*
    | primitiveType
    ;

innerCreator
    = IDENTIFIER nonWildcardTypeArgumentsOrDiamond? classCreatorRest
    ;

arrayCreatorRest
    = '[' (']' ('[' ']')* arrayInitializer | expression ']' ('[' expression ']')* ('[' ']')*)
    ;

classCreatorRest
    = arguments classBody?
    ;

explicitGenericInvocation
    = nonWildcardTypeArguments explicitGenericInvocationSuffix
    ;

typeArgumentsOrDiamond
    = '<' '>'
    | typeArguments
    ;

nonWildcardTypeArgumentsOrDiamond
    = '<' '>'
    | nonWildcardTypeArguments
    ;

nonWildcardTypeArguments
    = '<' typeList '>'
    ;

typeList
    = typeType (',' typeType)*
    ;

typeType
    = annotation? (classOrInterfaceType | primitiveType) ('[' ']')*
    ;

primitiveType
    = BOOLEAN
    | CHAR
    | BYTE
    | SHORT
    | INT
    | LONG
    | FLOAT
    | DOUBLE
    ;

typeArguments
    = '<' typeArgument (',' typeArgument)* '>'
    ;

superSuffix
    = arguments
    | '.' IDENTIFIER arguments?
    ;

explicitGenericInvocationSuffix
    = SUPER superSuffix
    | IDENTIFIER arguments
    ;

arguments
    = '(' expressionList? ')'
    ;


}