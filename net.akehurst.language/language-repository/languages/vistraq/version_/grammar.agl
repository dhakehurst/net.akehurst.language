namespace vistraq.query

grammar Base {
    skip leaf WHITE_SPACE = "\s+" ;
    skip leaf MULTI_LINE_COMMENT = "/\*[^*]*\*+([^*/][^*]*\*+)*/" ;
    skip leaf SINGLE_LINE_COMMENT = "//[^\n\r]*" ;

	leaf NAME = "[a-zA-Z_][a-zA-Z0-9_]*" ;
	leaf POSITIVE_INT = "[0-9]+" ;
	leaf UNLIMITED_POSITIVE_INT = "[0-9]+" | '*' ;
    leaf logicalOperator = 'AND' | 'OR' | 'XOR' ;
}

grammar Expressions extends Base {
    expression
		= root
		| literalValue
		| navigationExpression
        | indexOperatorCall
		| infixLogical
		| infixArithmetic
		| infixComparison
		| conditionalExpression
    	| groupExpression
        ;
	preference expression {
	  conditionalExpression on '?' left
	  infixLogical on logicalOperator left
	  infixComparison on comparisonOperator left
	  infixArithmetic on arithmeticOperator left
  	  navigationExpression on '.' left
	}

    groupExpression = '(' expression ')'  ;
	root = NAME | methodCall ;
	navigationExpression = expression '.' navigationCall ;
	navigationCall = propertyCall | methodCall ;
	propertyCall = NAME ;
	methodCall = NAME '(' argList ')';
    indexOperatorCall = expression '[' expression ']' ;
	argList = [expression / ',']* ;
	infixLogical = [expression / logicalOperator]2+ ;
	infixArithmetic = [expression / arithmeticOperator]2+ ;
	infixComparison = [expression / comparisonOperator]2+ ;

    leaf arithmeticOperator =  '/' | '*' | '+' | '-' ;
    leaf comparisonOperator = '==' | '!=' | '<=' | '>=' | '<' | '>'  ;

    conditionalExpression = expression '?' expression ':' expression ;

    literalValue = BOOLEAN < SINGLE_QUOTE_STRING < INTEGER < REAL < NULL ;
    leaf BOOLEAN = 'true' | 'false' ;
    leaf SINGLE_QUOTE_STRING = "'([^']|\\')*'" ;
    leaf INTEGER = "[0-9]+" ;
    leaf REAL = "[0-9]+[.][0-9]+" ;
    leaf NULL = 'null' ;
}

grammar GraphConstruction extends Base {
	subgraphConstruction = nodeSrc linkedSubGraphConstruction? whereConstructionClause?;
    nodeSrc = nodeConstruction | nodeReference ;
    nodeReference = NAME ;
	nodeConstruction = nodeTypeConstructionExpression '{' nodeIdentityExpressionConstruction nodePropertyAssignmentExpressionList? '}' aliasDefinition?;
	nodeTypeConstructionExpression = Expressions::expression ; // expression must result in a node type name
    nodeIdentityExpressionConstruction = Expressions::expression ;
    nodePropertyAssignmentExpressionList = '|' nodePropertyAssignmentExpression+ ;
    nodePropertyAssignmentExpression = NAME ':=' Expressions::expression ;

	linkedSubGraphConstruction = linkedNodeConstructionExpression+ ;
	linkedNodeConstructionExpression = linkedNodeConstructionPath | linkedNodeConstructionGroup ;
	linkedNodeConstructionPath = linkedNodeConstruction+ ;
	linkedNodeConstruction = 'LINKED' 'VIA' linkTypeReferenceExpression ('TO'|'FROM') nodeConstruction ;
	linkTypeReferenceExpression = Expressions::expression ;
	linkedNodeConstructionGroup = '(' linkedNodeConstructionGroupItem ')' ;
	linkedNodeConstructionGroupItem = linkedNodeConstructionPath |  linkedNodeConstructionGroupItemOperator ;
	linkedNodeConstructionGroupItemOperator =  linkedNodeConstructionExpression 'AND' linkedNodeConstructionExpression ;

	whereConstructionClause = 'WHERE' constructionExpressionList ;
	constructionExpressionList = [propertyAssignment / ';']+ ;
	propertyAssignment = propertyNavigation ':=' Expressions::expression ;
    propertyNavigation = [NAME / '.']+ ;

    aliasDefinition = 'AS' NAME ;
}

grammar GraphPathExpressions extends Base {
    pathExpression =  nodeSelector linkedNodeSelectorPath? ;

	nodeSelector = nodeTypeReferenceExpression aliasDefinition? ;
    nodeTypeReferenceExpression
        = nodeTypeReference
        < NONE_NODE_TYPE
        < ANY_NODE_TYPE
        < negatedNodeTypeReferenceExpression
        < nodeTypeReferenceGroup
        ;
    negatedNodeTypeReferenceExpression = 'NOT' nodeTypeReferenceExpression ;
    nodeTypeReferenceGroup = '(' [nodeTypeReferenceExpression / 'OR' ]+ ')' ;

    linkedNodeSelector = linkSelectorExpression ;
    linkedNodeSelectorNegated = linkSelectorNegated ;
	linkSelectorExpression = linkSelector | linkSelectorGroupedPath ;
	linkSelector = 'LINKED' links? multiplicity? via? aliasDefinition? ('TO'|'FROM'|'WITH') nodeSelector ;

	links = 'USING' range 'LINKS' ;
	multiplicity = range 'TIMES' ;
    range = POSITIVE_INT '..' UNLIMITED_POSITIVE_INT | UNLIMITED_POSITIVE_INT ;

	via = 'VIA'  linkTypeReferenceExpression ;
	linkSelectorNegated = 'NOT' linkSelectorGroupedPath ;
	linkSelectorGroupedPath = '(' linkSelectorGroupedItem ')' ;
	linkSelectorGroupedItem = linkedNodeSelectorPath | linkSelectorOperator ;
	//linkSelectorGroupedOperator = '(' linkSelectorOperator ')';
	linkSelectorOperator = linkedNodeSelectorPath logicalOperator linkedNodeSelectorPath ;

	linkedNodeSelectorPath = linkedNodeSelectorPathNormal | linkedNodeSelectorPathNegated ;
	linkedNodeSelectorPathNormal = linkedNodeSelector+ ;
	linkedNodeSelectorPathNegated = linkedNodeSelector*  linkedNodeSelectorNegated ;

    linkTypeReferenceExpression = ANY_LINK_TYPE | linkTypeReference | negatedLinkTypeReferenceExpression | linkTypeReferenceGroup ;
    negatedLinkTypeReferenceExpression = 'NOT' linkTypeReferenceExpression ;
    linkTypeReferenceGroup = '(' [linkTypeReferenceExpression / 'OR' ]+ ')' ;


    aliasDefinition = 'AS' NAME ;

	leaf ANY_NODE_TYPE = 'any' ;
	leaf NONE_NODE_TYPE = 'none' ;
	nodeTypeReference = NAME ;
	leaf ANY_LINK_TYPE = 'any' ;
	linkTypeReference = NAME ;
}

grammar Queries extends Base {
    query = singleQuery | compositeQuery | letInQuery;
    singleQuery = timespanDefinition? querySource? returnDefinition? ;
    compositeQuery = [ singleQuery / compositionOperator ]2+ ;
    compositionOperator = 'UNION' | 'JOIN' ;
    letInQuery = 'LET' [namedQuery / ';']+ 'IN' query ;
    namedQuery = STORED_QUERY_ID ':=' query ;

    timespanDefinition = 'FOR' timeDef aliasDefinition? ;
	timeDef =  time | timespan ;
	time = 'TIME' timePoint ;
	timePoint = 'first' | 'last' | 'now' | timestamp ;
	timestamp = QUOTED_TIMESTAMP ;
	timespan = 'TIMESPAN' timeRange 'EVERY' PERIOD ;
	timeRange = 'all' | timePoint 'UNTIL' timePoint ;
	leaf PERIOD = 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year' ;

	querySource = pathQuery | storedQueryReference | preQuery;
	storedQueryReference = 'FROM' STORED_QUERY_ID whereClause? ;
    preQuery = 'GIVEN' query pathQuery;
    pathQuery = 'MATCH' GraphPathExpressions::pathExpression whereClause? ;

	whereClause = 'WHERE' Expressions::expression ;

	returnDefinition = returnValue | returnTable | returnSelect | returnGraph ;

	returnValue = 'RETURN' 'VALUE' Expressions::expression ;
	returnGraph = 'RETURN' 'GRAPH' GraphConstruction::subgraphConstruction ;

	returnTable = 'RETURN' 'TABLE' columnDefinition+ orderBy? ;
	columnDefinition = 'COLUMN' NAME 'CONTAINING' Expressions::expression whereClause? ';' ;

    returnSelect = 'RETURN' 'SELECT' selectList;
    selectList = [selectItem / ',']* ;
    selectItem = NAME | propertyReference ;
    propertyReference = NAME '.' NAME ;

    aliasDefinition = 'AS' NAME ;
	orderBy = 'ORDER' 'BY' [columnOrder / ',']+ ;
	columnOrder = NAME ('ASCENDING' | 'DESCENDING')? ;

	leaf STORED_QUERY_ID = "([a-zA-Z_][a-zA-Z0-9_]*)([.][a-zA-Z_][a-zA-Z0-9_]*)?" ; // project metricDef OR metricSet.metricDef
    leaf QUOTED_TIMESTAMP = "'([^']|\\')*'" ; //TODO: better regex for timestamps
}

// Traceability Information Model
grammar TIM extends Base {
    model = 'typed-graph-model' '{'
        nodeList
        linkList
    '}'
    ;

    nodeList = nodeType* ;
    linkList = linkType* ;
    nodeType = 'node-type' NAME '{' propertyList '}' ;
    propertyList = [property / ',' ]* ;
    property = NAME ;
    linkType = 'link-type' linkTypeId? NAME multiplicity? '---' multiplicity? NAME ;
    linkTypeId = NAME ':' ;
    multiplicity = '[' range ']' ;
    range = OPTIONAL | UNLIMITED | INT | minMax ;
    minMax = INT '..' UNLIMITED_INT ;
    leaf OPTIONAL = '?' ;
    leaf UNLIMITED = '*' ;
    leaf UNLIMITED_INT = INT | UNLIMITED ;
    leaf INT = "[1-9][0-9]*" ;
}

grammar Unit extends Base {

    unit = query model? ;
    query = Queries::query ;
    model = TIM::model ;

}