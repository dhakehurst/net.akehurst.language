namespace com.itemis.create.Expressions {
    references {

    }
}

namespace com.itemis.create.Global {
    identify Interface by id
    identify InternalDeclarations by §nothing
    identify ImportDeclarations by §nothing
    scope Interface {
        identify VariableDeclaration by id
        identify EventDeclaration by id
        identify AliasDeclaration by id
        identify OperationDeclaration by id
    }
    scope InternalDeclarations {
        identify VariableDeclaration by id
        identify EventDeclaration by id
        identify AliasDeclaration by id
        identify OperationDeclaration by id
    }
    scope ImportDeclarations {
        identify ImportedName by string
    }
    scope OperationDeclaration {
        identify Parameter by id
    }
    references {
        in Annotation {
            property fqn refers-to AnnotationType
        }
        //in SimpleFeatureCall {
        //    property first refers-to Declaration
        //}
        in ActiveStateReferenceExpression {
            property fqn refers-to RegularState
        }
        in TypeCastExpression {
            property typeSpecifier.fqn refers-to Type
        }
        in FunctionCall {
            property id refers-to OperationDeclaration
            forall argumentList.arguments {
                property argumentId.id refers-to Parameter from id  // id should be a reference to an OperationDeclaration at this point
            }
        }
    }
}

namespace com.itemis.create.States {
}

namespace com.itemis.create.Transitions {
}

namespace com.itemis.create.Statechart {
    identify Region by name
    scope Region {
        identify State by name
    }
    scope State {
        identify Region by name
    }
}