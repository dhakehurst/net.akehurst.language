/**
 * Copyright (C) 2023 Dr. David H. Akehurst (http://dr.david.h.akehurst.net)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This grammar does not work too well with AGL as it is written for a top-down LL parser (which AGL is not).
 * There is another grammar written specifically for AGL and modularised which is better in many ways.
 */

namespace com.itemis.sysml.kerml.cst

grammar KerML {

    @defaultGoal: RootNamespace

    // 8.2.2 Root
    // 8.2.2.1 Line Terminators and White Space
    skip leaf WHITE_SPACE = "\s+" ;

    // 8.2.2.2 Notes and Comments
    skip leaf SINGLE_LINE_NOTE = "//[^\n\r]*" ;
    skip leaf MULTILINE_NOTE = "//\*[^*]*\*+(?:[^*/][^*]*\*+)*/" ;
    leaf REGULAR_COMMENT = "/\*[^*]*\*+(?:[^*/][^*]*\*+)*/" ;

    NAME = BASIC_NAME | UNRESTRICTED_NAME ;
    leaf BASIC_NAME = "[a-zA-Z_][0-9a-zA-Z_]*" ;
    leaf UNRESTRICTED_NAME = "'([^'\\]|\\.)*'" ;

    // 8.2.2.4 Numeric Values
    leaf DECIMAL_VALUE = "[0-9]+" ;
    leaf EXPONENTIAL_VALUE = DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE ;

    // 8.2.2.5 String Value
    leaf STRING_VALUE = "\"(\\\"|[^\"])*\"" ;

    // 8.2.2.7 Symbols
    leaf TYPED_BY = ':' | "typed(\s+)by" ;
    leaf SPECIALIZES = ':>' | 'specializes' ;
    leaf SUBSETS = ':>' | 'subsets' ;
    leaf REFERENCES = '::>' | 'references' ;
    leaf REDEFINES = ':>>' | 'redefines' ;
    leaf CONJUGATES = '~' | 'conjugates' ;

    // 8.2.3.1 Elements and Relationships Concrete Syntax
    Identification = ( '<' NAME '>' )? NAME? ;
    RelationshipBody = ';' | '{' RelationshipOwnedElement* '}' ;
    RelationshipOwnedElement = OwnedRelatedElement | OwnedAnnotation ;
    OwnedRelatedElement = NonFeatureElement | FeatureElement ;

    // 8.2.3.2 Dependencies
    Dependency =
        PrefixMetadataAnnotation* 'dependency'
        ( Identification? 'from' )? QualifiedName ( ',' QualifiedName)*
        'to' QualifiedName ( ',' QualifiedName)*
        RelationshipBody
    ;

    // 8.2.3.3.1 Annotations
    Annotation = QualifiedName ;
    OwnedAnnotation = AnnotatingElement ;
    AnnotatingElement
        = Comment
        | Documentation
        | TextualRepresentation
        | MetadataFeature
    ;

    Comment = ( 'comment' Identification ( 'about' Annotation ( ',' Annotation)*  )? )? REGULAR_COMMENT ;
    Documentation = 'doc' Identification REGULAR_COMMENT ;

    // 8.2.3.3.3 Textual Representation
    TextualRepresentation = ( 'rep' Identification )? 'language' STRING_VALUE REGULAR_COMMENT ;

    // 8.2.3.4.1 Namespaces
    RootNamespace = NamespaceBodyElement* ;
    Namespace = PrefixMetadataMember NamespaceDeclaration NamespaceBody ;
    NamespaceDeclaration = 'namespace' Identification ;
    NamespaceBody = ';' | '{' NamespaceBodyElement* '}' ;
    NamespaceBodyElement = NamespaceMember | AliasMember | Import ;
    MemberPrefix = VisibilityIndicator? ;
    VisibilityIndicator = 'public' | 'private' | 'protected' ;
    NamespaceMember = NonFeatureMember | NamespaceFeatureMember ;
    NonFeatureMember = MemberPrefix MemberElement ;
    NamespaceFeatureMember = MemberPrefix FeatureElement ;
    AliasMember = MemberPrefix 'alias' ( '<' NAME '>' )? NAME? 'for' QualifiedName RelationshipBody ;
    QualifiedName = NAME ('::' NAME)* ; // QualifiedName = (NAME '::')* NAME ;

    // 8.2.3.4.2 Imports
    Import = VisibilityIndicator? 'import' 'all'? ImportDeclaration RelationshipBody ;
    ImportDeclaration = MembershipImport | NamespaceImport ;
    MembershipImport = QualifiedName ( '::' '**' )? ;
    NamespaceImport = QualifiedName '::' '*' ( '::' '**' )?  |  FilterPackage ;
    FilterPackage = ImportDeclaration FilterPackageMember+ ;
    FilterPackageMember = '[' OwnedExpression ']' ;

    // 8.2.3.4.3 Namespace Elements
    MemberElement = AnnotatingElement | NonFeatureElement ;
    NonFeatureElement
        = Dependency
        | Namespace
        | Type
        | Classifier
        | DataType
        | Class
        | Structure
        | Metaclass
        | Association
        | AssociationStructure
        | Interaction
        | Behavior
        | Function
        | Predicate
        | Multiplicity
        | Package
        | LibraryPackage
        | Specialization
        | Conjugation
        | Subclassification
        | Disjoining
        | FeatureInverting
        | FeatureTyping
        | Subsetting
        | Redefinition
        | TypeFeaturing
    ;

    FeatureElement
        = Feature
        | Step
        | Expression
        | BooleanExpression
        | Invariant
        | Connector
        | BindingConnector
        | Succession
        | ItemFlow
        | SuccessionItemFlow
    ;


    // 8.2.4 Core
    // 8.2.4.1 Types
    // 8.2.4.1.1 Types
    Type = TypePrefix 'type' TypeDeclaration TypeBody ;
    TypePrefix = 'abstract'? PrefixMetadataMember* ;
    TypeDeclaration = 'all'? Identification OwnedMultiplicity? ( SpecializationPart | ConjugationPart )+ TypeRelationshipPart* ;
    SpecializationPart = SPECIALIZES OwnedSpecialization ( ','OwnedSpecialization )* ;
    ConjugationPart = CONJUGATES OwnedConjugation ;
    TypeRelationshipPart
        = DisjoiningPart
        | UnioningPart
        | IntersectingPart
        | DifferencingPart
    ;
    DisjoiningPart = 'disjoint' 'from' OwnedDisjoining ( ',' OwnedDisjoining )* ;
    UnioningPart = 'unions' Unioning ( ',' Unioning )* ;
    IntersectingPart = 'intersects' Intersecting ( ',' Intersecting )* ;
    DifferencingPart = 'differences' Differencing ( ',' Differencing )* ;
    TypeBody = ';' | '{' TypeBodyElement* '}' ;
    TypeBodyElement
        = NonFeatureMember
        | FeatureMember
        | AliasMember
        | Import
    ;

    // 8.2.4.1.2 Specialization
    Specialization = ( 'specialization' Identification )? 'subtype' SpecificType SPECIALIZES GeneralType RelationshipBody ;
    OwnedSpecialization = GeneralType ;
    SpecificType = QualifiedName | OwnedFeatureChain ;
    GeneralType = QualifiedName | OwnedFeatureChain ;

    // 8.2.4.1.3 Conjugation
    Conjugation =
        ( 'conjugation' Identification )?
        'conjugate' ( QualifiedName | FeatureChain )
        CONJUGATES  ( QualifiedName | FeatureChain)
        RelationshipBody
    ;
    OwnedConjugation = QualifiedName | FeatureChain ;

    // 8.2.4.1.4 Disjoining
    Disjoining =
        ( 'disjoining' Identification )?
        'disjoint' ( QualifiedName |  FeatureChain )
        'from' ( QualifiedName | FeatureChain )
        RelationshipBody
    ;
    OwnedDisjoining = QualifiedName | FeatureChain ;

    //8.2.4.1.5 Unioning, Intersecting and Differencing
    Unioning =QualifiedName | OwnedFeatureChain ;
    Intersecting = QualifiedName | OwnedFeatureChain ;
    Differencing = QualifiedName | OwnedFeatureChain ;

    //8.2.4.1.6 Feature Membership
    FeatureMember = TypeFeatureMember | OwnedFeatureMember ;
    TypeFeatureMember = MemberPrefix 'member' FeatureElement ;
    OwnedFeatureMember = MemberPrefix FeatureElement ;

    // 8.2.4.2 Classifiers
    //8.2.4.2.1 Classifiers
    Classifier = TypePrefix 'classifier' ClassifierDeclaration TypeBody ;
    ClassifierDeclaration =
        'all'? Identification OwnedMultiplicity? ( SuperclassingPart | ConjugationPart )?
        TypeRelationshipPart*
    ;
    SuperclassingPart = SPECIALIZES OwnedSubclassification ( ',' OwnedSubclassification )* ;

    // 8.2.4.2.2 Subclassification
    Subclassification =
        ( 'specialization' Identification )? 'subclassifier' QualifiedName SPECIALIZES QualifiedName
        RelationshipBody
    ;
    OwnedSubclassification = QualifiedName ;

    // 8.2.4.3 Features
    //8.2.4.3.1 Features
    Feature = FeaturePrefix ( 'feature'? FeatureDeclaration | 'feature' | PrefixMetadataMember ) ValuePart? TypeBody ;
    FeaturePrefix = FeatureDirection? 'abstract'? ( 'composite' | 'portion' )? 'readonly'? 'derived'?  'end'? PrefixMetadataMember* ;
    FeatureDirection = 'in' | 'out' | 'inout' ;
    FeatureDeclaration =
        'all'?
        ( FeatureIdentification ( FeatureSpecializationPart | ConjugationPart )?
          | FeatureSpecializationPart
          | FeatureConjugationPart
        )
        FeatureRelationshipPart*
    ;
    FeatureIdentification
        = '<' NAME '>' NAME?
        | NAME
    ;
    FeatureRelationshipPart
        = TypeRelationshipPart
        | ChainingPart
        | InvertingPart
        | TypeFeaturingPart
    ;
    ChainingPart = 'chains' ( OwnedFeatureChaining | FeatureChain ) ;
    InvertingPart = 'inverse' 'of' OwnedFeatureInverting ;
    TypeFeaturingPart = 'featured' 'by' OwnedTypeFeaturing ( ',' OwnedTypeFeaturing )* ;
    FeatureSpecializationPart
        = FeatureSpecialization+ MultiplicityPart? FeatureSpecialization*
        | MultiplicityPart FeatureSpecialization*
    ;
    MultiplicityPart
        = OwnedMultiplicity
        | OwnedMultiplicity? ( 'ordered' 'nonunique'? | 'nonunique' 'ordered'? )
    ;
    FeatureSpecialization = Typings | Subsettings | References | Redefinitions ;
    Typings = TypedBy ( ',' OwnedFeatureTyping )* ;
    TypedBy = TYPED_BY OwnedFeatureTyping ;
    Subsettings = Subsets ( ',' OwnedSubsetting )* ;
    Subsets = SUBSETS OwnedSubsetting ;
    References = REFERENCES OwnedReferenceSubsetting ;
    Redefinitions = Redefines ( ',' OwnedRedefinition )* ;
    Redefines = REDEFINES OwnedRedefinition ;

    //8.2.4.3.2 Feature Typing
    FeatureTyping =
        ( 'specialization' Identification )?
        'typing' QualifiedName
        TYPED_BY GeneralType
        RelationshipBody
    ;
    OwnedFeatureTyping = GeneralType ;

    //8.2.4.3.3 Subsetting
    Subsetting =
        ( 'specialization' Identification )?
        'subset' SpecificType
        SUBSETS GeneralType
        RelationshipBody
    ;
    OwnedSubsetting = GeneralType ;
    OwnedReferenceSubsetting = GeneralType ;

    //8.2.4.3.4 Redefinition
    Redefinition =
        ( 'specialization' Identification )?
        'redefinition' SpecificType
        REDEFINES GeneralType
        RelationshipBody
    ;
    OwnedRedefinition = GeneralType ;

    //8.2.4.3.5 Feature Chaining
    OwnedFeatureChain = FeatureChain ;
    FeatureChain = OwnedFeatureChaining ( '.' OwnedFeatureChaining )+ ;
    OwnedFeatureChaining = QualifiedName ;

    //8.2.4.3.6 Feature Inverting
    FeatureInverting =
        ( 'inverting' Identification? )?
        'inverse' ( QualifiedName | OwnedFeatureChain)
        'of' ( QualifiedName | OwnedFeatureChain )
        RelationshipBody
    ;
    OwnedFeatureInverting = QualifiedName | OwnedFeatureChain;

/* Feature Conjugation */

FeatureConjugationPart = CONJUGATES FeatureConjugation ;
FeatureConjugation = QualifiedName ;


    //8.2.4.3.7 Type Featuring
    TypeFeaturing = 'featuring' ( Identification 'of' )? QualifiedName 'by' QualifiedName RelationshipBody ;
    OwnedTypeFeaturing = QualifiedName ;


    // 8.2.5.1
    DataType = TypePrefix 'datatype' ClassifierDeclaration TypeBody ;
    // 8.2.5.2
    Class = TypePrefix 'class' ClassifierDeclaration TypeBody ;
    // 8.2.5.3
    Structure = TypePrefix 'struct' ClassifierDeclaration TypeBody ;
    // 8.2.5.4
    Association = TypePrefix 'assoc' ClassifierDeclaration TypeBody ;
    AssociationStructure = TypePrefix 'assoc' 'struct' ClassifierDeclaration TypeBody ;

    // 8.2.5.5 Connectors Concrete Syntax
    // 8.2.5.5.1 Connectors
    Connector = FeaturePrefix 'connector' ConnectorDeclaration TypeBody ;
    ConnectorDeclaration = BinaryConnectorDeclaration | NaryConnectorDeclaration ;
    BinaryConnectorDeclaration = ( FeatureDeclaration? 'from' | 'all'? 'from'? )? ConnectorEndMember 'to' ConnectorEndMember ;
    NaryConnectorDeclaration = FeatureDeclaration ( '(' [ConnectorEndMember /',']2+ ')' )? ;

ConnectorEndMember = ConnectorEnd ;
ConnectorEnd = (NAME REFERENCES )? OwnedReferenceSubsetting OwnedMultiplicity? ;

    //8.2.5.5.2 Binding Connectors
    BindingConnector  = FeaturePrefix 'binding' BindingConnectorDeclaration TypeBody ;
    BindingConnectorDeclaration
        = FeatureDeclaration ( 'of' ConnectorEndMember '=' ConnectorEndMember )?
        | 'all'? ( 'of'? ConnectorEndMember '=' ConnectorEndMember )?
    ;

    //8.2.5.5.3 Successions
    Succession = FeaturePrefix 'succession' SuccessionDeclaration TypeBody ;
    SuccessionDeclaration
        = FeatureDeclaration ( 'first' ConnectorEndMember 'then' ConnectorEndMember )?
        | 'all'? ( 'first'? ConnectorEndMember 'then' ConnectorEndMember )?
    ;

    // 8.2.5.6 Behaviors
    //8.2.5.6.1 Behaviors
    Behavior = TypePrefix 'behavior' ClassifierDeclaration TypeBody ;
    //8.2.5.6.2 Steps
    Step = FeaturePrefix 'step' FeatureDeclaration ValuePart? TypeBody ;

    //8.2.5.7 Functions Concrete Syntax
    //8.2.5.7.1 Functions
    Function = TypePrefix 'function' ClassifierDeclaration FunctionBody ;
    FunctionBody = ';' | '{' FunctionBodyPart '}' ;
    FunctionBodyPart = ( TypeBodyElement | ReturnFeatureMember )* ( ResultExpressionMember )? ;
    ReturnFeatureMember = MemberPrefix 'return' FeatureElement ;
    ResultExpressionMember = MemberPrefix OwnedExpression ;

    //8.2.5.7.2 Expressions
    Expression = FeaturePrefix 'expr' FeatureDeclaration ValuePart? FunctionBody ;

    //8.2.5.7.3 Predicates
    Predicate = TypePrefix 'predicate' ClassifierDeclaration FunctionBody ;

    // 8.2.5.7.4 Boolean Expressions and Invariants
    BooleanExpression = FeaturePrefix 'bool' FeatureDeclaration ValuePart? FunctionBody ;
    Invariant = FeaturePrefix 'inv' ( 'true' | 'false' )? FeatureDeclaration ValuePart? FunctionBody ;

    //8.2.5.8 Expressions Concrete Syntax
    //8.2.5.8.1 Operator Expressions
    OwnedExpressionReferenceMember = OwnedExpressionReference ;
    OwnedExpressionReference = OwnedExpressionMember ;
    OwnedExpressionMember = OwnedExpression ;
    OwnedExpression
        = ConditionalExpression
        | ConditionalBinaryOperatorExpression
        | BinaryOperatorExpression
        | UnaryOperatorExpression
        | ClassificationExpression
        | MetaclassificationExpression
        | ExtentExpression
        | PrimaryExpression
    ;
    ConditionalExpression = 'if' ArgumentMember '?' ArgumentExpressionMember 'else' ArgumentExpressionMember ;
    ConditionalBinaryOperatorExpression = ArgumentMember ConditionalBinaryOperator ArgumentExpressionMember ;
    ConditionalBinaryOperator = '??' | 'or' | 'and' | 'implies' ;
    BinaryOperatorExpression = ArgumentMember BinaryOperator ArgumentMember ;
    BinaryOperator =
        '|' | '&' | 'xor' | '..'
        | '===' | '!==' | '==' | '!='
        | '<' | '>' | '<=' | '>='
        | '+' | '-' | '*' | '/'
        | '%' | '^' | '**'
    ;
    UnaryOperatorExpression = UnaryOperator ArgumentMember ;
    UnaryOperator = '+' | '-' | '~' | 'not' ;
    ClassificationExpression = ( ArgumentMember )? ( ClassificationTestOperator TypeReferenceMember | CastOperator TypeResultMember) ;
    ClassificationTestOperator = 'istype' | 'hastype' | '@' ;
    CastOperator = 'as' ;
    MetaclassificationExpression =
        MetadataArgumentMember
        ( MetaClassificationTestOperator TypeReferenceMember | MetaCastOperator TypeResultMember )
    ;
    ArgumentMember = Argument ;
    Argument = ArgumentValue ;
    ArgumentValue = OwnedExpression ;
    ArgumentExpressionMember = ArgumentExpression ;
    ArgumentExpression = ArgumentExpressionValue ;
    ArgumentExpressionValue = OwnedExpressionReference ;
    MetadataArgumentMember = MetadataArgument ;
    MetadataArgument = MetadataValue ;
    MetadataValue = MetadataReference ;
    MetadataReference = QualifiedName ;
    MetaClassificationTestOperator = '@@' ;
    MetaCastOperator = 'meta' ;
    ExtentExpression ='all' TypeReferenceMember ;
    TypeReferenceMember = TypeReference ;
    TypeResultMember = TypeReference ;
    TypeReference = ReferenceTyping ;
    ReferenceTyping = QualifiedName ;

    // 8.2.5.8.2 Primary Expressions
    PrimaryExpression = FeatureChainExpression | NonFeatureChainPrimaryExpression ;
    PrimaryExpressionMember = PrimaryExpression ;
    NonFeatureChainPrimaryExpression
        = BracketExpression
        | IndexExpression
        | SequenceExpression
        | SelectExpression
        | CollectExpression
        | FunctionOperationExpression
        | BaseExpression
    ;
    NonFeatureChainPrimaryExpressionMember = NonFeatureChainPrimaryExpression ;
    BracketExpression =  PrimaryExpressionMember '[' SequenceExpressionListMember ']' ;
    IndexExpression = PrimaryExpressionMember '#' '(' SequenceExpressionListMember ')' ;
    SequenceExpression = '(' SequenceExpressionList ')' ;
    SequenceExpressionList = OwnedExpression ','? | SequenceOperatorExpression ;
    SequenceOperatorExpression = OwnedExpressionMember ',' SequenceExpressionListMember ;
    SequenceExpressionListMember = SequenceExpressionList ;
    FeatureChainExpression = NonFeatureChainPrimaryExpressionMember '.' FeatureChainMember ;
    CollectExpression = PrimaryExpressionMember '.' BodyExpressionMember ;
    SelectExpression = PrimaryExpressionMember '.?' BodyExpressionMember ;
    FunctionOperationExpression =
        PrimaryExpressionMember '->'
        ReferenceTyping ( BodyExpressionMember | FunctionReferenceExpression | ArgumentList )
    ;
    BodyExpressionMember = BodyExpression ;
    FunctionExpressionMember = FunctionReferenceExpression ;
    FunctionReferenceExpression = FunctionReferenceMember ;
    FunctionReferenceMember = FunctionReference ;
    FunctionReference = ReferenceTyping ;
    FeatureChainMember = FeatureReferenceMember | OwnedFeatureChainMember ;
    OwnedFeatureChainMember = FeatureChain ;

    //8.2.5.8.3 Base Expressions
    BaseExpression
        = NullExpression
        | LiteralExpression
        | FeatureReferenceExpression
        | MetadataAccessExpression
        | InvocationExpression
        | BodyExpression
    ;
    NullExpression = 'null' | '(' ')' ;
    FeatureReferenceExpression = FeatureReferenceMember ;
    FeatureReferenceMember = FeatureReference ;
    FeatureReference = QualifiedName ;
    MetadataAccessExpression = QualifiedName '.' 'metadata' ;
    InvocationExpression = ( OwnedFeatureTyping | OwnedSubsetting ) ArgumentList ;
    ArgumentList = '(' ( PositionalArgumentList | NamedArgumentList )? ')' ;
    PositionalArgumentList = ArgumentMember ( ',' ArgumentMember )* ;
    NamedArgumentList = NamedArgumentMember ( ',' NamedArgumentMember )* ;
    NamedArgumentMember = NamedArgument ;
    NamedArgument = ParameterRedefinition '=' ArgumentValue ;
    ParameterRedefinition = QualifiedName ;
    BodyExpression = ExpressionBodyMember ;
    ExpressionBodyMember = ExpressionBody ;
    ExpressionBody = '{' FunctionBodyPart '}' ;

    //8.2.5.8.4 Literal Expressions
    LiteralExpression
        = LiteralBoolean
        | LiteralString
        | LiteralInteger
        | LiteralReal
        | LiteralInfinity
    ;
    LiteralBoolean = BooleanValue ;
    BooleanValue = 'true' | 'false' ;
    LiteralString = STRING_VALUE ;
    LiteralInteger = DECIMAL_VALUE ;
    LiteralReal = RealValue ;
    RealValue
        = DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXPONENTIAL_VALUE )
        | EXPONENTIAL_VALUE
    ;
    LiteralInfinity = '*' ;

    //8.2.5.9 Interactions Concrete Syntax
    //8.2.5.9.1 Interactions
    Interaction = TypePrefix 'interaction' ClassifierDeclaration TypeBody ;

    //8.2.5.9.2 Item Flows
    ItemFlow = FeaturePrefix 'flow' ItemFlowDeclaration TypeBody ;
    SuccessionItemFlow = FeaturePrefix 'succession' 'flow' ItemFlowDeclaration TypeBody ;
    ItemFlowDeclaration
        = FeatureDeclaration ValuePart? ( 'of' ItemFeatureMember )? ( 'from' ItemFlowEndMember 'to' ItemFlowEndMember )?
        | 'all'? ItemFlowEndMember 'to' ItemFlowEndMember
    ;
    ItemFeatureMember = ItemFeature ;
    ItemFeature
        = Identification ItemFeatureSpecializationPart ValuePart?
        | OwnedFeatureTyping OwnedMultiplicity?
        | OwnedMultiplicity OwnedFeatureTyping?
    ;
    ItemFeatureSpecializationPart = FeatureSpecialization+ MultiplicityPart? FeatureSpecialization* | MultiplicityPart FeatureSpecialization+ ;
    ItemFlowEndMember = ItemFlowEnd ;
    ItemFlowEnd = ( OwnedReferenceSubsetting '.' )? ItemFlowFeatureMember ;
    ItemFlowFeatureMember = ItemFlowFeature ;
    ItemFlowFeature = ItemFlowRedefinition ;
    ItemFlowRedefinition = QualifiedName ;

    //8.2.5.10 Feature Values Concrete Syntax
    ValuePart = FeatureValue ;
    FeatureValue = ( '=' | ':=' | 'default' ( '=' | ':=' )? ) OwnedExpression ;

    // 8.2.5.11 Multiplicities
    Multiplicity = MultiplicitySubset | MultiplicityRange ;
    MultiplicitySubset = 'multiplicity' Identification Subsets TypeBody ;
    MultiplicityRange = 'multiplicity' Identification MultiplicityBounds TypeBody ;
    OwnedMultiplicity = OwnedMultiplicityRange ;
    OwnedMultiplicityRange = MultiplicityBounds ;
    MultiplicityBounds = '[' ( MultiplicityExpressionMember '..' )? MultiplicityExpressionMember ']' ;
    MultiplicityExpressionMember =  LiteralExpression | FeatureReferenceExpression ;

    //8.2.5.12 Metadata Concrete Syntax
    Metaclass = TypePrefix 'metaclass' ClassifierDeclaration TypeBody ;
    PrefixMetadataAnnotation = '#' PrefixMetadataFeature ;
    PrefixMetadataMember = '#' PrefixMetadataFeature ;
    PrefixMetadataFeature = OwnedFeatureTyping ;
    MetadataFeature = ( '@' | 'metadata' ) MetadataFeatureDeclaration ( 'about' Annotation ( ',' Annotation )* )? MetadataBody ;
    MetadataFeatureDeclaration = ( Identification TYPED_BY )? OwnedFeatureTyping ;
    MetadataBody = ';' | '{' MetadataBodyElement* '}' ;

    MetadataBodyElement
        = NonFeatureMember
        | MetadataBodyFeatureMember
        | AliasMember
        | Import
    ;
    MetadataBodyFeatureMember = MetadataBodyFeature ;
    MetadataBodyFeature = 'feature'? REDEFINES? OwnedRedefinition FeatureSpecializationPart? ValuePart? MetadataBody ;

    // 8.2.5.13 Packages Concrete Syntax
    Package = PrefixMetadataMember* PackageDeclaration PackageBody ;
    LibraryPackage = 'standard'? 'library' PrefixMetadataMember* PackageDeclaration PackageBody ;
    PackageDeclaration = 'package' Identification ;
    PackageBody
        = ';'
        | '{' ( NamespaceBodyElement | ElementFilterMember )* '}'
    ;
    ElementFilterMember = MemberPrefix 'filter' OwnedExpression ';' ;

}