/**
 * Copyright (C) 2023 Dr. David H. Akehurst (http://dr.david.h.akehurst.net)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace com.itemis.sysml.kerml.cst

grammar Base {

    skip leaf WHITE_SPACE = "\s+" ;
    skip leaf SINGLE_LINE_NOTE = "//[^\n\r]*" ;
    skip leaf MULTILINE_NOTE = "//\*[^*]*\*+(?:[^*/][^*]*\*+)*/" ;

    leaf REGULAR_COMMENT = "/\*[^*]*\*+(?:[^*/][^*]*\*+)*/" ;

    leaf STRING_VALUE = "\"(\\\"|[^\"])*\"" ;

    leaf TYPED_BY = ':' | "typed(\s+)by" ;
    leaf SPECIALIZES = ':>' | 'specializes' ;
    leaf SUBSETS = ':>' | 'subsets' ;
    leaf REFERENCES = '::>' | 'references' ;
    leaf REDEFINES = ':>>' | 'redefines' ;
    leaf CONJUGATES = '~' | 'conjugates' ;

    leaf BASIC_NAME = "[a-zA-Z_][0-9a-zA-Z_]*" ;
    leaf UNRESTRICTED_NAME = "'([^'\\]|\\.)*'" ;

    NAME = BASIC_NAME | UNRESTRICTED_NAME ;
    Identification = ( '<' NAME '>' )? NAME? ;
    QualifiedName = [NAME / '::']+ ;
    QualifiedNameList = [QualifiedName / ',']+ ;

    TypeReference = QualifiedName ;
    FunctionReference = QualifiedName ;
    FeatureReference = QualifiedName ;
    FeatureChain = [ FeatureReference / '.' ]+ ;
    FeatureChainList = [FeatureChain / ',']+ ;
}

grammar Annotations extends Base {

    Comment = ( 'comment' Identification ( 'about' QualifiedNameList )? )? REGULAR_COMMENT ;
    Documentation = 'doc' Identification REGULAR_COMMENT ;

    TextualRepresentation = ( 'rep' Identification )? 'language' STRING_VALUE REGULAR_COMMENT ;

    Annotation
        = Comment
        | Documentation
        | TextualRepresentation
    ;

    MemberPrefix = VisibilityIndicator? ;
    VisibilityIndicator = 'public' | 'private' | 'protected' ;
}

grammar LiteralExpressions extends Base {

    leaf BOOLEAN_VALUE = 'true' | 'false' ;
    leaf DECIMAL_VALUE = "[0-9]+" ;
    leaf REAL_VALUE = "[0-9]*(\.(([0-9]+)?))?((e|E)((\+|-)?)[0-9]+)?" ;

    LiteralExpression
        = LiteralBoolean
        | LiteralString
        | LiteralInteger
        | LiteralReal
        | LiteralInfinity
    ;
    LiteralBoolean = BOOLEAN_VALUE ;
    LiteralString = STRING_VALUE ;
    LiteralInteger = DECIMAL_VALUE ;
    LiteralReal = REAL_VALUE ;
    LiteralInfinity = '*' ;
}

grammar Expressions extends LiteralExpressions {

    Expression
        = ConditionalExpression
        | ConditionalBinaryOperatorExpression
        | BinaryOperatorExpression
        | UnaryOperatorExpression
        | ClassificationExpression
        | ExtentExpression
        | PrimaryExpression
    ;

    PrimaryExpression = FeatureChainExpression | NonFeatureChainPrimaryExpression ;
    FeatureChainExpression = NonFeatureChainPrimaryExpression '.' FeatureChain ;

    NonFeatureChainPrimaryExpression
        = BracketExpression
        | IndexExpression
        | SequenceExpression
        | SelectExpression
        | CollectExpression
        | FunctionOperationExpression
        | NullExpression
        | LiteralExpression
        | FeatureReference
        | InvocationExpression
        | ExpressionBody
    ;

    // Expressions
    ConditionalExpression = 'if' Expression '?' Expression 'else' Expression ;

    ConditionalBinaryOperatorExpression = Expression CONDITIONAL_BINARY_OPERATOR Expression ;
    CONDITIONAL_BINARY_OPERATOR = '??' | 'or' | 'and' | 'implies' ;

    BinaryOperatorExpression = Expression BINARY_OPERATOR Expression ;
    leaf BINARY_OPERATOR =
        '|' | '&' | 'xor' | '..'
        | '===' | '!==' | '==' | '!='
        | '<=' | '>=' | '<' | '>'
        | '+' | '-' | '*' | '/'
        | '%' | '^' | '**'
    ;

    UnaryOperatorExpression = UNARY_OPERATOR Expression ;
    leaf UNARY_OPERATOR = '+' | '-' | '~' | 'not' ;

    ClassificationExpression = ( Expression )? ( CLASSIFICATION_TEST_OPERATOR TypeReference | 'as' TypeReference) ;
    leaf CLASSIFICATION_TEST_OPERATOR = 'istype' | 'hastype' | '@' ;

    ExtentExpression = 'all' TypeReference ;

    // NonFeatureChainPrimaryExpressions
    BracketExpression =  PrimaryExpression '[' SequenceExpressionList ']' ;
    IndexExpression = PrimaryExpression '#' '(' SequenceExpressionList ')' ;
    SequenceExpression = '(' SequenceExpressionList ')' ;
    SequenceExpressionList = [Expression /',']+ ;
    CollectExpression = PrimaryExpression '.' ExpressionBody ;
    SelectExpression = PrimaryExpression '.?' ExpressionBody ;

    FunctionOperationExpression =
        PrimaryExpression '->'
        TypeReference ( ExpressionBody | FunctionReference | ArgumentList )
    ;

    NullExpression = 'null' | '(' ')' ;

    InvocationExpression = FeatureChain '(' ArgumentList? ')' ;
    ArgumentList = PositionalArgumentList | NamedArgumentList ;
    PositionalArgumentList = [Expression / ',']+ ;
    NamedArgumentList = [NamedArgument / ',']+ ;
    NamedArgument = NAME '=' Expression ;

    ExpressionBody = '{' FunctionBodyPart '}' ;
    FunctionBodyPart = Expression ;

}

grammar Types extends LiteralExpressions, Annotations {
    Type = TypePrefix 'type' TypeDeclaration TypeBody ;
    TypePrefix = 'abstract'? ; //separate rule so it can be overridden to add PrefixMetadataMember*
    TypeDeclaration = 'all'? Identification MultiplicityBounds? ( SpecializationPart | ConjugationPart )+ TypeRelationshipPart* ;
    SpecializationPart = SPECIALIZES FeatureChainList ;
    ConjugationPart = CONJUGATES FeatureChain ;
    TypeRelationshipPart
        = DisjoiningPart
        | UnioningPart
        | IntersectingPart
        | DifferencingPart
    ;
    DisjoiningPart = 'disjoint' 'from' FeatureChainList ;
    UnioningPart = 'unions' FeatureChainList ;
    IntersectingPart = 'intersects' FeatureChainList ;
    DifferencingPart = 'differences' FeatureChainList ;
    TypeBody = ';' | '{' TypeBodyElement* '}' ;
    TypeBodyElement
        = Annotation
    ;

    Multiplicity = MultiplicitySubset | MultiplicityRange ;
    MultiplicitySubset = 'multiplicity' Identification SUBSETS FeatureChain TypeBody ;
    MultiplicityRange = 'multiplicity' Identification MultiplicityBounds TypeBody ;
    MultiplicityBounds = '[' ( MultiplicityExpressionMember '..' )? MultiplicityExpressionMember ']' ;
    MultiplicityExpressionMember =  LiteralExpression | FeatureReference ;
}

grammar Classifiers extends Types {

    SimpleClassifier = TypePrefix 'classifier' ClassifierDeclaration TypeBody ;
    ClassifierDeclaration =
        'all'? Identification MultiplicityBounds? ( SuperclassingPart | ConjugationPart )?
        TypeRelationshipPart*
    ;
    SuperclassingPart = SPECIALIZES QualifiedNameList ;

    DataType = TypePrefix 'datatype' ClassifierDeclaration TypeBody ;
    Class = TypePrefix 'class' ClassifierDeclaration TypeBody ;
    Structure = TypePrefix 'struct' ClassifierDeclaration TypeBody ;
    Association = TypePrefix 'assoc' ClassifierDeclaration TypeBody ;
    AssociationStructure = TypePrefix 'assoc' 'struct' ClassifierDeclaration TypeBody ;

    Classifier
        = SimpleClassifier
        | DataType
        | Class
        | Structure
        | Association
        | AssociationStructure
    ;
}

grammar Relationships extends Annotations {

    RelationshipBody = ';' | '{' RelationshipElement* '}' ;
    RelationshipElement = Annotation ;

    Dependency = 'dependency' ( Identification? 'from' )? QualifiedNameList 'to' QualifiedNameList RelationshipBody ;

    SpecializationIdentifier = 'specialization' Identification ;
    Specialization = SpecializationIdentifier? 'subtype' FeatureChain SPECIALIZES FeatureChain RelationshipBody ;
    FeatureTyping = SpecializationIdentifier? 'typing' QualifiedName TYPED_BY FeatureChain RelationshipBody ;
    Subsetting = SpecializationIdentifier? 'subset' FeatureChain SUBSETS FeatureChain RelationshipBody ;
    Redefinition = SpecializationIdentifier? 'redefinition' FeatureChain REDEFINES FeatureChain RelationshipBody ;
    Subclassification = SpecializationIdentifier? 'subclassifier' QualifiedName SPECIALIZES QualifiedName RelationshipBody ;

    InvertingIdentifier = 'inverting' Identification? ;
    FeatureInverting = InvertingIdentifier? 'inverse' FeatureChain 'of' FeatureChain RelationshipBody ;

    Conjugation = ( 'conjugation' Identification )? 'conjugate' FeatureChain CONJUGATES FeatureChain RelationshipBody ;
    Disjoining = ( 'disjoining' Identification )? 'disjoint' FeatureChain 'from' FeatureChain RelationshipBody ;

    TypeFeaturing = 'featuring' ( Identification 'of' )? QualifiedName 'by' QualifiedName RelationshipBody ;

    Relationship
        = Dependency
        | Specialization
        | FeatureTyping
        | Subsetting
        | Redefinition
        | FeatureInverting
        | Subclassification
        | Conjugation
        | Disjoining
        | TypeFeaturing
    ;
}

grammar Features extends Types, Expressions {

    Feature = FeaturePrefix 'feature'? FeatureDeclaration? FeatureValue? TypeBody ;
    FeaturePrefix = FeatureDirection? 'abstract'? ( 'composite' | 'portion' )? 'readonly'? 'derived'?  'end'? ;
    FeatureDirection = 'in' | 'out' | 'inout' ;
    FeatureDeclaration =
        'all'?
        ( Identification ( FeatureSpecializationPart | ConjugationPart )?
          | FeatureSpecializationPart
          | FeatureConjugationPart
        )
        FeatureRelationshipPart*
    ;

    FeatureValue = ( '=' | ':=' | 'default' ( '=' | ':=' )? ) Expression ;
    FeatureSpecializationPart
        = FeatureSpecialization+ MultiplicityPart? FeatureSpecialization*
        | MultiplicityPart FeatureSpecialization*
    ;
    MultiplicityPart
        = MultiplicityBounds
        | MultiplicityBounds? ( 'ordered' 'nonunique'? | 'nonunique' 'ordered'? )
    ;

    FeatureSpecialization = Typings | Subsettings | References | Redefinitions ;
    Typings = TYPED_BY FeatureChainList ;
    Subsettings = SUBSETS FeatureChainList ;
    References = REFERENCES FeatureChain ;
    Redefinitions = REDEFINES FeatureChainList ;

    FeatureConjugationPart = CONJUGATES QualifiedName ;

    FeatureRelationshipPart
        = TypeRelationshipPart
        | ChainingPart
        | InvertingPart
        | TypeFeaturingPart
    ;
    ChainingPart = 'chains' FeatureChain ;
    InvertingPart = 'inverse' 'of' FeatureChain ;
    TypeFeaturingPart = 'featured' 'by' QualifiedNameList ;
}

grammar Connectors extends Features {

    Connector = FeaturePrefix 'connector' ConnectorDeclaration TypeBody ;
    ConnectorDeclaration = BinaryConnectorDeclaration | NaryConnectorDeclaration ;
    BinaryConnectorDeclaration = ( FeatureDeclaration? 'from' | 'all'? 'from'? )? ConnectorEndMember 'to' ConnectorEndMember ;
    NaryConnectorDeclaration = FeatureDeclaration ( '(' [ConnectorEndMember /',']2+ ')' )? ;
    ConnectorEndMember = ConnectorEnd ;
    ConnectorEnd = (NAME REFERENCES )? FeatureChain MultiplicityBounds? ;

    BindingConnector  = FeaturePrefix 'binding' BindingConnectorDeclaration TypeBody ;
    BindingConnectorDeclaration
        = FeatureDeclaration ( 'of' ConnectorEndMember '=' ConnectorEndMember )?
        | 'all'? ( 'of'? ConnectorEndMember '=' ConnectorEndMember )?
    ;

    Succession = FeaturePrefix 'succession' SuccessionDeclaration TypeBody ;
    SuccessionDeclaration
        = FeatureDeclaration ( 'first' ConnectorEndMember 'then' ConnectorEndMember )?
        | 'all'? ( 'first'? ConnectorEndMember 'then' ConnectorEndMember )?
    ;
}

grammar Behaviors extends Features, Classifiers {

    SimpleBehavior = TypePrefix 'behavior' ClassifierDeclaration TypeBody ;
    Step = FeaturePrefix 'step' FeatureDeclaration FeatureValue? TypeBody ;

    Function = TypePrefix 'function' ClassifierDeclaration FunctionBody ;
    FunctionBody = ';' | '{' FunctionBodyPart '}' ;
    override FunctionBodyPart = ( TypeBodyElement | ReturnFeatureMember )* ( ResultExpressionMember )? ;
    ReturnFeatureMember = MemberPrefix 'return' FeatureElement ;
    ResultExpressionMember = MemberPrefix Expression ;

    Predicate = TypePrefix 'predicate' ClassifierDeclaration FunctionBody ;

    ExpressionElement = FeaturePrefix 'expr' FeatureDeclaration FeatureValue? FunctionBody ;

    BooleanExpression = FeaturePrefix 'bool' FeatureDeclaration FeatureValue? FunctionBody ;
    Invariant = FeaturePrefix 'inv' ( 'true' | 'false' )? FeatureDeclaration FeatureValue? FunctionBody ;

    Interaction = TypePrefix 'interaction' ClassifierDeclaration TypeBody ;

    ItemFlow = FeaturePrefix 'flow' ItemFlowDeclaration TypeBody ;
    SuccessionItemFlow = FeaturePrefix 'succession' 'flow' ItemFlowDeclaration TypeBody ;
    ItemFlowDeclaration
        = FeatureDeclaration FeatureValue? ( 'of' ItemFeature )? ( 'from' ItemFlowEndMember 'to' ItemFlowEndMember )?
        | 'all'? ItemFlowEndMember 'to' ItemFlowEndMember
    ;
    ItemFeature
        = Identification ItemFeatureSpecializationPart FeatureValue?
        | FeatureChain MultiplicityBounds?
        | MultiplicityBounds FeatureChain?
    ;
    ItemFeatureSpecializationPart = FeatureSpecialization+ MultiplicityPart? FeatureSpecialization* | MultiplicityPart FeatureSpecialization+ ;
    ItemFlowEndMember = ItemFlowEnd ;
    ItemFlowEnd = ( FeatureChain '.' )? ItemFlowFeatureMember ;
    ItemFlowFeatureMember = ItemFlowFeature ;
    ItemFlowFeature = ItemFlowRedefinition ;
    ItemFlowRedefinition = QualifiedName ;

    FeatureElement
        = Feature
        | Step
        | ExpressionElement
        | BooleanExpression
        | Invariant
        | ItemFlow
        | SuccessionItemFlow
    ;

    Behavior
        = SimpleBehavior
        | Function
        | Interaction
        | Predicate
        ;
}

grammar Containers extends Relationships, Expressions {

    Container = Namespace | Package | LibraryPackage ;

    Package = PackageDeclaration PackageBody ;
    LibraryPackage = 'standard'? 'library' PackageDeclaration PackageBody ;
    PackageDeclaration = 'package' QualifiedName ;
    PackageBody = ';' | '{' PackageBodyElement* '}' ;
    PackageBodyElement = NamespaceBodyElement | ElementFilterMember ;
    ElementFilterMember = MemberPrefix 'filter' Expression ';' ;

    Namespace = NamespaceDeclaration NamespaceBody ;
    NamespaceDeclaration = 'namespace' QualifiedName ;
    NamespaceBody = ';' | '{' NamespaceBodyElement* '}' ;
    NamespaceBodyElement = NamespaceMember | AliasMember | Import ;

    NamespaceMember = NonFeatureMember | NamespaceFeatureMember ;
    NonFeatureMember = MemberPrefix MemberElement ;
    NamespaceFeatureMember = MemberPrefix FeatureElement ;
    AliasMember = MemberPrefix 'alias' ( '<' NAME '>' )? NAME? 'for' QualifiedName RelationshipBody ;

    Import = VisibilityIndicator? 'import' 'all'? ImportDeclaration RelationshipBody ;
    ImportDeclaration = MembershipImport | NamespaceImport ;
    MembershipImport = QualifiedName ( '::' '**' )? ;
    NamespaceImport = QualifiedName '::' '*' ( '::' '**' )?  |  FilterPackage ;
    FilterPackage = ImportDeclaration FilterPackageMember+ ;
    FilterPackageMember = '[' Expression ']' ;

    MemberElement = Annotation | NonFeatureElement ;

    NonFeatureElement
        =  Namespace
        // to be extended
    ;

    FeatureElement
        = Annotation
        // to be extended
    ;

}

grammar Meta extends Containers, Classifiers, Features {

    MetadataAccessExpression = QualifiedName '.' 'metadata' ;
    MetaclassificationExpression =
        MetadataArgumentMember
        ( MetaClassificationTestOperator TypeReference | MetaCastOperator TypeReference )
    ;
    MetadataArgumentMember = MetadataArgument ;
    MetadataArgument = MetadataValue ;
    MetadataValue = MetadataReference ;
    MetadataReference = QualifiedName ;
    MetaClassificationTestOperator = '@@' ;
    MetaCastOperator = 'meta' ;

    Metaclass = TypePrefix 'metaclass' ClassifierDeclaration TypeBody ;
    PrefixMetadataAnnotation = '#' PrefixMetadataFeature ;
    PrefixMetadataMember = '#' PrefixMetadataFeature ;
    PrefixMetadataFeature = FeatureChain ;
    MetadataFeature = ( '@' | 'metadata' ) MetadataFeatureDeclaration ( 'about' QualifiedNameList )? MetadataBody ;
    MetadataFeatureDeclaration = ( Identification TYPED_BY )? FeatureChain ;
    MetadataBody = ';' | '{' MetadataBodyElement* '}' ;

    MetadataBodyElement
        = NonFeatureMember
        | MetadataBodyFeatureMember
        | AliasMember
        | Import
    ;
    MetadataBodyFeatureMember = MetadataBodyFeature ;
    MetadataBodyFeature = 'feature'? REDEFINES? FeatureChain FeatureSpecializationPart? FeatureValue? MetadataBody ;

}

grammar KerML extends Meta, Behaviors, Connectors {

    @defaultRule: RootNamespace

    RootNamespace = NamespaceBodyElement* ;

    FeatureMember = TypeFeatureMember | OwnedFeatureMember ;
    TypeFeatureMember = MemberPrefix 'member' FeatureElement ;
    OwnedFeatureMember = MemberPrefix FeatureElement ;

    override NonFeatureElement
        = Container
        | Type
        | Classifier
        | Behavior
        | Multiplicity
        | Relationship
        | Metaclass
    ;

    override FeatureElement
        = Feature
        | Step
        | ExpressionElement
        | BooleanExpression
        | Invariant
        | ItemFlow
        | SuccessionItemFlow
        | Connector
        | BindingConnector
        | Succession
    ;

    override TypeBodyElement
        = NonFeatureMember
        | FeatureMember
        | AliasMember
        | Import
    ;

    override RelationshipElement
        = NonFeatureElement
        | FeatureElement
        | Annotation
    ;

    // FunctionBodyPart is inherited via two paths
    // substitute the definition from Behaviors as the one we want
    override FunctionBodyPart == Behaviors.FunctionBodyPart ;

    // add Meta stuff to other rules, here not in Meta because
    // some are inherited twice here and would need to be overridden again anyway
    override Expression +=| MetaclassificationExpression ;
    override NonFeatureChainPrimaryExpression +=| MetadataAccessExpression ;

    override Annotation +=| MetadataFeature ;
    override Dependency = PrefixMetadataAnnotation* 'dependency' ( Identification? 'from' )? QualifiedNameList 'to' QualifiedNameList RelationshipBody ;
    override Namespace = PrefixMetadataMember* NamespaceDeclaration NamespaceBody ;
    override TypePrefix = 'abstract'? PrefixMetadataMember* ;
    override FeaturePrefix = FeatureDirection? 'abstract'? ( 'composite' | 'portion' )? 'readonly'? 'derived'?  'end'? PrefixMetadataMember* ;
    override Package = PrefixMetadataMember* PackageDeclaration PackageBody ;
    override LibraryPackage = 'standard'? 'library' PrefixMetadataMember* PackageDeclaration PackageBody ;

}