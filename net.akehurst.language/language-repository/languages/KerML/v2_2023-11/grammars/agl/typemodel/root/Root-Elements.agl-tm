/*
 * Copyright (C) 2024 Dr. David H. Akehurst (http://dr.david.h.akehurst.net)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

namespace KerML.Root.Elements

datatype Element {
    composite val elementId: String

    composite var aliasIds: List<String>
    composite var declaredName: String?
    composite var declaredShortName: String?
    composite var isImpliedIncluded: Boolean //= false  // check(ownedRelationship->exists(isImplied) implies isImpliedIncluded)

    composite var ownedRelationship: List<Relationship> // [0..*] {subsets relationship}
    reference var owningRelationship: Relationship?

    derived val documentation:List<Documentation>   // = ownedElement.filter(Documentation)
    derived val isLibraryElement: Namespace?        // = null != libraryNamespace()
    derived val name: String?                       // = effectiveName()
    derived val ownedAnnotation: List<Annotation>   // = ownedRelationship.filter(Annotation).filter{ it.annotatedElement == self }
    derived val ownedElement:List <Element>         // = ownedRelationship.ownedRelatedElement
    derived val owner: Element?                     // = ownedRelationship.owningRelatedElement
    derived val owningMembership: OwningMembership? // {subsets owningRelationship, membership}
    derived val owningNamespace:Namespace?          // = owningMembership?.membershipOwningNamespace
    derived val qualifiedName: String?              /* = when {
                                                     *     null == owningNamespace?.owner -> escapedName()
                                                     *     else -> owningNamespace?.qualifiedName?.let { it + '::' + escapedName() }
                                                     *   }
                                                     */
    derived val shortName: String?                  // = effectiveShortName()
    derived val textualRepresentation               // = ownedElement.filter(TextualRepresentation)

    fun escapedName() : String?         //= name ?: shortName ?
    fun effectiveShortName() : String?  //= self.declaredShortName
    fun effectiveName() : String?       //= self.declaredName
    fun libraryNamespace() : Namespace? //= owningRelationship?.libraryNamespace()
}

dataType Relationship : Element {
    composite var isImplied: Boolean  //= false

    redefine fun libraryNamespace() : Namespace? //=
}

