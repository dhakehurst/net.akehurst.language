test_java_example - 'f(i++)'
1 ===================================
0 --------------------------------------
GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(0/0-[0.RP(<GOAL>,0,0)]) -- WIDTH[IDENTIFIER]() --> State(1/0-[-1.RP(<EMPTY>,0,-1)]) {[0.RP(<GOAL>,0,0)]}
  Transition: State(0/0-[0.RP(<GOAL>,0,0)]) -- WIDTH[IDENTIFIER]() --> State(2/0-[0.RP('<>',0,-1)]) {[0.RP(<GOAL>,0,0)]}
  Transition: State(0/0-[0.RP(<GOAL>,0,0)]) -- WIDTH['(']() --> State(3/0-[0.RP(IDENTIFIER,0,-1)]) {[0.RP(<GOAL>,0,0)]}
Taking: GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0} ==> null ==> null
Taking: Transition: State(0/0-[0.RP(<GOAL>,0,0)]) -- WIDTH[IDENTIFIER]() --> State(1/0-[-1.RP(<EMPTY>,0,-1)]) {[0.RP(<GOAL>,0,0)]}
Taking: GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0} ==> null ==> null
Taking: Transition: State(0/0-[0.RP(<GOAL>,0,0)]) -- WIDTH['(']() --> State(3/0-[0.RP(IDENTIFIER,0,-1)]) {[0.RP(<GOAL>,0,0)]}
2 ===================================
0 --------------------------------------
GNI{state=State(3/0-[0.RP(IDENTIFIER,0,-1)]),lhs=[],sp=0,np=1,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(3/0-[0.RP(IDENTIFIER,0,-1)]) -- HEIGHT['(']('::') --> State(4/0-[0.RP(MethodInvocation,0,1)]) {[0.RP(<GOAL>,0,0)]}
Taking: GNI{state=State(3/0-[0.RP(IDENTIFIER,0,-1)]),lhs=[],sp=0,np=1,len=0} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0} ==> null
Taking: Transition: State(3/0-[0.RP(IDENTIFIER,0,-1)]) -- HEIGHT['(']('::') --> State(4/0-[0.RP(MethodInvocation,0,1)]) {[0.RP(<GOAL>,0,0)]}
1 --------------------------------------
GNI{state=State(4/0-[0.RP(MethodInvocation,0,1)]),lhs=['::'],sp=0,np=1,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(4/0-[0.RP(MethodInvocation,0,1)]) -- WIDTH[IDENTIFIER]() --> State(5/0-[0.RP('(',0,-1)]) {[0.RP(<GOAL>,0,0)]}
Taking: GNI{state=State(4/0-[0.RP(MethodInvocation,0,1)]),lhs=['::'],sp=0,np=1,len=1} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0} ==> null
Taking: Transition: State(4/0-[0.RP(MethodInvocation,0,1)]) -- WIDTH[IDENTIFIER]() --> State(5/0-[0.RP('(',0,-1)]) {[0.RP(<GOAL>,0,0)]}
4 ===================================
0 --------------------------------------
GNI{state=State(5/0-[0.RP('(',0,-1)]),lhs=[],sp=1,np=2,len=0} --> GNI{state=State(4/0-[0.RP(MethodInvocation,0,1)]),lhs=['::'],sp=0,np=1,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(5/0-[0.RP('(',0,-1)]) -- GRAFT[IDENTIFIER]() --> State(6/0-[0.RP(MethodInvocation,0,2)]) {[0.RP(MethodInvocation,0,1)]}
Taking: GNI{state=State(5/0-[0.RP('(',0,-1)]),lhs=[],sp=1,np=2,len=0} ==> GNI{state=State(4/0-[0.RP(MethodInvocation,0,1)]),lhs=['::'],sp=0,np=1,len=1} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Taking: Transition: State(5/0-[0.RP('(',0,-1)]) -- GRAFT[IDENTIFIER]() --> State(6/0-[0.RP(MethodInvocation,0,2)]) {[0.RP(MethodInvocation,0,1)]}
1 --------------------------------------
GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(6/0-[0.RP(MethodInvocation,0,2)]) -- WIDTH[')', '++']() --> State(3/0-[0.RP(IDENTIFIER,0,-1)]) {[0.RP(<GOAL>,0,0)]}
Taking: GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0} ==> null
Taking: Transition: State(6/0-[0.RP(MethodInvocation,0,2)]) -- WIDTH[')', '++']() --> State(3/0-[0.RP(IDENTIFIER,0,-1)]) {[0.RP(<GOAL>,0,0)]}
6 ===================================
0 --------------------------------------
GNI{state=State(3/0-[0.RP(IDENTIFIER,0,-1)]),lhs=[],sp=2,np=3,len=0} --> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(3/0-[0.RP(IDENTIFIER,0,-1)]) -- HEIGHT[')', '++'](')', '++') --> State(7/0-[0.RP(Expression,1,-1)]) {[0.RP(MethodInvocation,0,2)]}
Taking: GNI{state=State(3/0-[0.RP(IDENTIFIER,0,-1)]),lhs=[],sp=2,np=3,len=0} ==> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Taking: Transition: State(3/0-[0.RP(IDENTIFIER,0,-1)]) -- HEIGHT[')', '++'](')', '++') --> State(7/0-[0.RP(Expression,1,-1)]) {[0.RP(MethodInvocation,0,2)]}
1 --------------------------------------
GNI{state=State(7/0-[0.RP(Expression,1,-1)]),lhs=[')', '++'],sp=2,np=3,len=1} --> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(7/0-[0.RP(Expression,1,-1)]) -- HEIGHT['++'](')', '++') --> State(8/0-[0.RP(Postfix,0,1)]) {[0.RP(MethodInvocation,0,2)]}
  Transition: State(7/0-[0.RP(Expression,1,-1)]) -- GRAFT[')']() --> State(9/0-[0.RP(MethodInvocation,0,3)]) {[0.RP(MethodInvocation,0,2)]}
Taking: GNI{state=State(7/0-[0.RP(Expression,1,-1)]),lhs=[')', '++'],sp=2,np=3,len=1} ==> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Taking: Transition: State(7/0-[0.RP(Expression,1,-1)]) -- HEIGHT['++'](')', '++') --> State(8/0-[0.RP(Postfix,0,1)]) {[0.RP(MethodInvocation,0,2)]}
2 --------------------------------------
GNI{state=State(8/0-[0.RP(Postfix,0,1)]),lhs=[')', '++'],sp=2,np=3,len=1} --> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(8/0-[0.RP(Postfix,0,1)]) -- WIDTH[<RT>]() --> State(10/0-[0.RP('++',0,-1)]) {[0.RP(MethodInvocation,0,2)]}
Taking: GNI{state=State(8/0-[0.RP(Postfix,0,1)]),lhs=[')', '++'],sp=2,np=3,len=1} ==> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Taking: Transition: State(8/0-[0.RP(Postfix,0,1)]) -- WIDTH[<RT>]() --> State(10/0-[0.RP('++',0,-1)]) {[0.RP(MethodInvocation,0,2)]}
9 ===================================
0 --------------------------------------
GNI{state=State(10/0-[0.RP('++',0,-1)]),lhs=[],sp=3,np=5,len=0} --> GNI{state=State(8/0-[0.RP(Postfix,0,1)]),lhs=[')', '++'],sp=2,np=3,len=1} --> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(10/0-[0.RP('++',0,-1)]) -- GRAFT[<RT>]() --> State(11/0-[0.RP(Postfix,0,-1)]) {[0.RP(Postfix,0,1)]}
Taking: GNI{state=State(10/0-[0.RP('++',0,-1)]),lhs=[],sp=3,np=5,len=0} ==> GNI{state=State(8/0-[0.RP(Postfix,0,1)]),lhs=[')', '++'],sp=2,np=3,len=1} ==> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2}
Taking: Transition: State(10/0-[0.RP('++',0,-1)]) -- GRAFT[<RT>]() --> State(11/0-[0.RP(Postfix,0,-1)]) {[0.RP(Postfix,0,1)]}
1 --------------------------------------
GNI{state=State(11/0-[0.RP(Postfix,0,-1)]),lhs=[')', '++'],sp=2,np=5,len=2} --> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(11/0-[0.RP(Postfix,0,-1)]) -- HEIGHT[')', '++'](')', '++') --> State(12/0-[0.RP(Expression,0,-1)]) {[0.RP(MethodInvocation,0,2)]}
Taking: GNI{state=State(11/0-[0.RP(Postfix,0,-1)]),lhs=[')', '++'],sp=2,np=5,len=2} ==> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Taking: Transition: State(11/0-[0.RP(Postfix,0,-1)]) -- HEIGHT[')', '++'](')', '++') --> State(12/0-[0.RP(Expression,0,-1)]) {[0.RP(MethodInvocation,0,2)]}
2 --------------------------------------
GNI{state=State(12/0-[0.RP(Expression,0,-1)]),lhs=[')', '++'],sp=2,np=5,len=1} --> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(12/0-[0.RP(Expression,0,-1)]) -- HEIGHT['++'](')', '++') --> State(8/0-[0.RP(Postfix,0,1)]) {[0.RP(MethodInvocation,0,2)]}
  Transition: State(12/0-[0.RP(Expression,0,-1)]) -- GRAFT[')']() --> State(9/0-[0.RP(MethodInvocation,0,3)]) {[0.RP(MethodInvocation,0,2)]}
Taking: GNI{state=State(12/0-[0.RP(Expression,0,-1)]),lhs=[')', '++'],sp=2,np=5,len=1} ==> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=['::'],sp=0,np=2,len=2} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Taking: Transition: State(12/0-[0.RP(Expression,0,-1)]) -- GRAFT[')']() --> State(9/0-[0.RP(MethodInvocation,0,3)]) {[0.RP(MethodInvocation,0,2)]}
3 --------------------------------------
GNI{state=State(9/0-[0.RP(MethodInvocation,0,3)]),lhs=['::'],sp=0,np=5,len=3} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(9/0-[0.RP(MethodInvocation,0,3)]) -- WIDTH[<RT>]() --> State(13/0-[0.RP(')',0,-1)]) {[0.RP(<GOAL>,0,0)]}
Dropped Data: GNI{state=State(9/0-[0.RP(MethodInvocation,0,3)]),lhs=['::'],sp=0,np=5,len=3}
4 --------------------------------------
GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(1/0-[-1.RP(<EMPTY>,0,-1)]) -- HEIGHT[IDENTIFIER](IDENTIFIER) --> State(14/0-[0.RP(optTypeArguments,E,ER)]) {[0.RP(<GOAL>,0,0)]}
Taking: GNI{state=State(1/0-[-1.RP(<EMPTY>,0,-1)]),lhs=[],sp=0,np=0,len=0} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0} ==> null
Taking: Transition: State(1/0-[-1.RP(<EMPTY>,0,-1)]) -- HEIGHT[IDENTIFIER](IDENTIFIER) --> State(14/0-[0.RP(optTypeArguments,E,ER)]) {[0.RP(<GOAL>,0,0)]}
5 --------------------------------------
GNI{state=State(14/0-[0.RP(optTypeArguments,E,ER)]),lhs=[IDENTIFIER],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(14/0-[0.RP(optTypeArguments,E,ER)]) -- HEIGHT[IDENTIFIER](<RT>) --> State(15/0-[0.RP(GenericMethodInvocation,0,1)]) {[0.RP(<GOAL>,0,0)]}
Taking: GNI{state=State(14/0-[0.RP(optTypeArguments,E,ER)]),lhs=[IDENTIFIER],sp=0,np=0,len=1} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0} ==> null
Taking: Transition: State(14/0-[0.RP(optTypeArguments,E,ER)]) -- HEIGHT[IDENTIFIER](<RT>) --> State(15/0-[0.RP(GenericMethodInvocation,0,1)]) {[0.RP(<GOAL>,0,0)]}
6 --------------------------------------
GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(15/0-[0.RP(GenericMethodInvocation,0,1)]) -- WIDTH['(']() --> State(3/0-[0.RP(IDENTIFIER,0,-1)]) {[0.RP(<GOAL>,0,0)]}
Taking: GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0} ==> null
Taking: Transition: State(15/0-[0.RP(GenericMethodInvocation,0,1)]) -- WIDTH['(']() --> State(3/0-[0.RP(IDENTIFIER,0,-1)]) {[0.RP(<GOAL>,0,0)]}
7 --------------------------------------
GNI{state=State(3/0-[0.RP(IDENTIFIER,0,-1)]),lhs=[],sp=0,np=1,len=0} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(3/0-[0.RP(IDENTIFIER,0,-1)]) -- HEIGHT['('](<RT>, '::') --> State(4/0-[0.RP(MethodInvocation,0,1)]) {[0.RP(<GOAL>,0,0)], [0.RP(GenericMethodInvocation,0,1)]}
Taking: GNI{state=State(3/0-[0.RP(IDENTIFIER,0,-1)]),lhs=[],sp=0,np=1,len=0} ==> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Taking: Transition: State(3/0-[0.RP(IDENTIFIER,0,-1)]) -- HEIGHT['('](<RT>, '::') --> State(4/0-[0.RP(MethodInvocation,0,1)]) {[0.RP(<GOAL>,0,0)], [0.RP(GenericMethodInvocation,0,1)]}
8 --------------------------------------
GNI{state=State(4/0-[0.RP(MethodInvocation,0,1)]),lhs=[<EOT>, '::'],sp=0,np=1,len=1} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(4/0-[0.RP(MethodInvocation,0,1)]) -- WIDTH[IDENTIFIER]() --> State(5/0-[0.RP('(',0,-1)]) {[0.RP(<GOAL>,0,0)], [0.RP(GenericMethodInvocation,0,1)]}
Taking: GNI{state=State(4/0-[0.RP(MethodInvocation,0,1)]),lhs=[<EOT>, '::'],sp=0,np=1,len=1} ==> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Taking: Transition: State(4/0-[0.RP(MethodInvocation,0,1)]) -- WIDTH[IDENTIFIER]() --> State(5/0-[0.RP('(',0,-1)]) {[0.RP(<GOAL>,0,0)], [0.RP(GenericMethodInvocation,0,1)]}
9 --------------------------------------
GNI{state=State(5/0-[0.RP('(',0,-1)]),lhs=[],sp=1,np=2,len=0} --> GNI{state=State(4/0-[0.RP(MethodInvocation,0,1)]),lhs=[<EOT>, '::'],sp=0,np=1,len=1} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(5/0-[0.RP('(',0,-1)]) -- GRAFT[IDENTIFIER]() --> State(6/0-[0.RP(MethodInvocation,0,2)]) {[0.RP(MethodInvocation,0,1)]}
Taking: GNI{state=State(5/0-[0.RP('(',0,-1)]),lhs=[],sp=1,np=2,len=0} ==> GNI{state=State(4/0-[0.RP(MethodInvocation,0,1)]),lhs=[<EOT>, '::'],sp=0,np=1,len=1} ==> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1}
Taking: Transition: State(5/0-[0.RP('(',0,-1)]) -- GRAFT[IDENTIFIER]() --> State(6/0-[0.RP(MethodInvocation,0,2)]) {[0.RP(MethodInvocation,0,1)]}
10 --------------------------------------
GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(6/0-[0.RP(MethodInvocation,0,2)]) -- WIDTH[')', '++']() --> State(3/0-[0.RP(IDENTIFIER,0,-1)]) {[0.RP(<GOAL>,0,0)], [0.RP(GenericMethodInvocation,0,1)]}
Taking: GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} ==> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Taking: Transition: State(6/0-[0.RP(MethodInvocation,0,2)]) -- WIDTH[')', '++']() --> State(3/0-[0.RP(IDENTIFIER,0,-1)]) {[0.RP(<GOAL>,0,0)], [0.RP(GenericMethodInvocation,0,1)]}
11 --------------------------------------
GNI{state=State(3/0-[0.RP(IDENTIFIER,0,-1)]),lhs=[],sp=2,np=3,len=0} --> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(3/0-[0.RP(IDENTIFIER,0,-1)]) -- HEIGHT[')', '++'](')', '++') --> State(7/0-[0.RP(Expression,1,-1)]) {[0.RP(MethodInvocation,0,2)]}
Taking: GNI{state=State(3/0-[0.RP(IDENTIFIER,0,-1)]),lhs=[],sp=2,np=3,len=0} ==> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} ==> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1}
Taking: Transition: State(3/0-[0.RP(IDENTIFIER,0,-1)]) -- HEIGHT[')', '++'](')', '++') --> State(7/0-[0.RP(Expression,1,-1)]) {[0.RP(MethodInvocation,0,2)]}
12 --------------------------------------
GNI{state=State(7/0-[0.RP(Expression,1,-1)]),lhs=[')', '++'],sp=2,np=3,len=1} --> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(7/0-[0.RP(Expression,1,-1)]) -- HEIGHT['++'](')', '++') --> State(8/0-[0.RP(Postfix,0,1)]) {[0.RP(MethodInvocation,0,2)]}
  Transition: State(7/0-[0.RP(Expression,1,-1)]) -- GRAFT[')']() --> State(9/0-[0.RP(MethodInvocation,0,3)]) {[0.RP(MethodInvocation,0,2)]}
Taking: GNI{state=State(7/0-[0.RP(Expression,1,-1)]),lhs=[')', '++'],sp=2,np=3,len=1} ==> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} ==> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1}
Taking: Transition: State(7/0-[0.RP(Expression,1,-1)]) -- HEIGHT['++'](')', '++') --> State(8/0-[0.RP(Postfix,0,1)]) {[0.RP(MethodInvocation,0,2)]}
13 --------------------------------------
GNI{state=State(8/0-[0.RP(Postfix,0,1)]),lhs=[')', '++'],sp=2,np=3,len=1} --> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(8/0-[0.RP(Postfix,0,1)]) -- WIDTH[<RT>]() --> State(10/0-[0.RP('++',0,-1)]) {[0.RP(MethodInvocation,0,2)]}
Taking: GNI{state=State(8/0-[0.RP(Postfix,0,1)]),lhs=[')', '++'],sp=2,np=3,len=1} ==> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} ==> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1}
Taking: Transition: State(8/0-[0.RP(Postfix,0,1)]) -- WIDTH[<RT>]() --> State(10/0-[0.RP('++',0,-1)]) {[0.RP(MethodInvocation,0,2)]}
14 --------------------------------------
GNI{state=State(10/0-[0.RP('++',0,-1)]),lhs=[],sp=3,np=5,len=0} --> GNI{state=State(8/0-[0.RP(Postfix,0,1)]),lhs=[')', '++'],sp=2,np=3,len=1} --> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(10/0-[0.RP('++',0,-1)]) -- GRAFT[<RT>]() --> State(11/0-[0.RP(Postfix,0,-1)]) {[0.RP(Postfix,0,1)]}
Taking: GNI{state=State(10/0-[0.RP('++',0,-1)]),lhs=[],sp=3,np=5,len=0} ==> GNI{state=State(8/0-[0.RP(Postfix,0,1)]),lhs=[')', '++'],sp=2,np=3,len=1} ==> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2}
Taking: Transition: State(10/0-[0.RP('++',0,-1)]) -- GRAFT[<RT>]() --> State(11/0-[0.RP(Postfix,0,-1)]) {[0.RP(Postfix,0,1)]}
15 --------------------------------------
GNI{state=State(11/0-[0.RP(Postfix,0,-1)]),lhs=[')', '++'],sp=2,np=5,len=2} --> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(11/0-[0.RP(Postfix,0,-1)]) -- HEIGHT[')', '++'](')', '++') --> State(12/0-[0.RP(Expression,0,-1)]) {[0.RP(MethodInvocation,0,2)]}
Taking: GNI{state=State(11/0-[0.RP(Postfix,0,-1)]),lhs=[')', '++'],sp=2,np=5,len=2} ==> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} ==> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1}
Taking: Transition: State(11/0-[0.RP(Postfix,0,-1)]) -- HEIGHT[')', '++'](')', '++') --> State(12/0-[0.RP(Expression,0,-1)]) {[0.RP(MethodInvocation,0,2)]}
16 --------------------------------------
GNI{state=State(12/0-[0.RP(Expression,0,-1)]),lhs=[')', '++'],sp=2,np=5,len=1} --> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(12/0-[0.RP(Expression,0,-1)]) -- HEIGHT['++'](')', '++') --> State(8/0-[0.RP(Postfix,0,1)]) {[0.RP(MethodInvocation,0,2)]}
  Transition: State(12/0-[0.RP(Expression,0,-1)]) -- GRAFT[')']() --> State(9/0-[0.RP(MethodInvocation,0,3)]) {[0.RP(MethodInvocation,0,2)]}
Taking: GNI{state=State(12/0-[0.RP(Expression,0,-1)]),lhs=[')', '++'],sp=2,np=5,len=1} ==> GNI{state=State(6/0-[0.RP(MethodInvocation,0,2)]),lhs=[<EOT>, '::'],sp=0,np=2,len=2} ==> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1}
Taking: Transition: State(12/0-[0.RP(Expression,0,-1)]) -- GRAFT[')']() --> State(9/0-[0.RP(MethodInvocation,0,3)]) {[0.RP(MethodInvocation,0,2)]}
17 --------------------------------------
GNI{state=State(9/0-[0.RP(MethodInvocation,0,3)]),lhs=[<EOT>, '::'],sp=0,np=5,len=3} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(9/0-[0.RP(MethodInvocation,0,3)]) -- WIDTH[<RT>]() --> State(13/0-[0.RP(')',0,-1)]) {[0.RP(<GOAL>,0,0)], [0.RP(GenericMethodInvocation,0,1)]}
Taking: GNI{state=State(9/0-[0.RP(MethodInvocation,0,3)]),lhs=[<EOT>, '::'],sp=0,np=5,len=3} ==> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Taking: Transition: State(9/0-[0.RP(MethodInvocation,0,3)]) -- WIDTH[<RT>]() --> State(13/0-[0.RP(')',0,-1)]) {[0.RP(<GOAL>,0,0)], [0.RP(GenericMethodInvocation,0,1)]}
27 ===================================
0 --------------------------------------
GNI{state=State(13/0-[0.RP(')',0,-1)]),lhs=[],sp=5,np=6,len=0} --> GNI{state=State(9/0-[0.RP(MethodInvocation,0,3)]),lhs=[<EOT>, '::'],sp=0,np=5,len=3} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(13/0-[0.RP(')',0,-1)]) -- GRAFT[<RT>]() --> State(16/0-[0.RP(MethodInvocation,0,-1)]) {[0.RP(MethodInvocation,0,3)]}
Taking: GNI{state=State(13/0-[0.RP(')',0,-1)]),lhs=[],sp=5,np=6,len=0} ==> GNI{state=State(9/0-[0.RP(MethodInvocation,0,3)]),lhs=[<EOT>, '::'],sp=0,np=5,len=3} ==> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1}
Taking: Transition: State(13/0-[0.RP(')',0,-1)]) -- GRAFT[<RT>]() --> State(16/0-[0.RP(MethodInvocation,0,-1)]) {[0.RP(MethodInvocation,0,3)]}
1 --------------------------------------
GNI{state=State(16/0-[0.RP(MethodInvocation,0,-1)]),lhs=[<EOT>, '::'],sp=0,np=6,len=4} --> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(16/0-[0.RP(MethodInvocation,0,-1)]) -- GRAFT[<RT>]() --> State(17/0-[0.RP(GenericMethodInvocation,0,-1)]) {[0.RP(GenericMethodInvocation,0,1)]}
Taking: GNI{state=State(16/0-[0.RP(MethodInvocation,0,-1)]),lhs=[<EOT>, '::'],sp=0,np=6,len=4} ==> GNI{state=State(15/0-[0.RP(GenericMethodInvocation,0,1)]),lhs=[<EOT>],sp=0,np=0,len=1} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Taking: Transition: State(16/0-[0.RP(MethodInvocation,0,-1)]) -- GRAFT[<RT>]() --> State(17/0-[0.RP(GenericMethodInvocation,0,-1)]) {[0.RP(GenericMethodInvocation,0,1)]}
2 --------------------------------------
GNI{state=State(17/0-[0.RP(GenericMethodInvocation,0,-1)]),lhs=[<EOT>],sp=0,np=6,len=2} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(17/0-[0.RP(GenericMethodInvocation,0,-1)]) -- HEIGHT[<RT>](<RT>) --> State(18/0-[0.RP(NavigableExpression,1,-1)]) {[0.RP(<GOAL>,0,0)]}
Taking: GNI{state=State(17/0-[0.RP(GenericMethodInvocation,0,-1)]),lhs=[<EOT>],sp=0,np=6,len=2} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0} ==> null
Taking: Transition: State(17/0-[0.RP(GenericMethodInvocation,0,-1)]) -- HEIGHT[<RT>](<RT>) --> State(18/0-[0.RP(NavigableExpression,1,-1)]) {[0.RP(<GOAL>,0,0)]}
3 --------------------------------------
GNI{state=State(18/0-[0.RP(NavigableExpression,1,-1)]),lhs=[<EOT>],sp=0,np=6,len=1} --> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0}
Choices:
  Transition: State(18/0-[0.RP(NavigableExpression,1,-1)]) -- GOAL[<EOT>]() --> State(19/0-[0.RP(<GOAL>,0,-1)]) {[0.RP(<GOAL>,0,0)]}
Taking: GNI{state=State(18/0-[0.RP(NavigableExpression,1,-1)]),lhs=[<EOT>],sp=0,np=6,len=1} ==> GNI{state=State(0/0-[0.RP(<GOAL>,0,0)]),lhs=[<EOT>],sp=0,np=0,len=0} ==> null
Taking: Transition: State(18/0-[0.RP(NavigableExpression,1,-1)]) -- GOAL[<EOT>]() --> State(19/0-[0.RP(<GOAL>,0,-1)]) {[0.RP(<GOAL>,0,0)]}
4 --------------------------------------
GNI{state=State(19/0-[0.RP(<GOAL>,0,-1)]),lhs=[<EOT>],sp=0,np=6,len=1}
