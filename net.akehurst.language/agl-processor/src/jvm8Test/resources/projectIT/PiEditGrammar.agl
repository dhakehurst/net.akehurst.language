namespace projectIT

grammar Expressions {

    expression
      = constant
      | var
      | instanceExpression
      ;

    instanceExpression = var ':' var ;

    constant = number | string ;

    leaf var = "[a-zA-Z][a-zA-Z0-9]*" ;
    leaf number = "[0-9]+" ;
    leaf string = "\"([^\"\\]|\\.)*\"" ;

}

grammar Text extends Expressions {

    text = textItem* ;
    textItem
     = literal
     | escapedChar
     | embeddedExpression
     ;

    embeddedExpression = '${' expression '}' ;

    leaf escapedChar = '\\\\' | '\\$' ;
    leaf literal = "[^\\$|\]\\]+" ;

}

grammar PiEditGrammar extends Expressions {

    skip leaf WHITESPACE = "\s+" ;
    skip leaf COMMENT_SINGLE_LINE = "//[^\r\n]*" ;
    skip leaf COMMENT_MULTI_LINE = "/\*[^*]*\*+([^*/][^*]*\*+)*/" ;


    projectionGroup = 'editor' var ('precedence' number)?
          standardBooleanProjection?
          standardReferenceSeparator?
          classifierProjection*
    ;


    standardBooleanProjection = 'boolean' '[' templateText '|' templateText ']' ;
    standardReferenceSeparator = 'referenceSeparator' '[' templateText ']' ;


    classifierProjection =
            classifierReference '{'
                projectionChoice?
                //extraClassifierInfo?
            '}'
      ;

    projectionChoice
      = projection
      ;

    projection = '[' templateText ']' ;

    classifierReference = var ;

    templateText = Text::text ;

}