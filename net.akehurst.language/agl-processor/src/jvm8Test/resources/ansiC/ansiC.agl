namespace net.akehurst.language

grammar C_Expression {

    skip WS = "\s+" ;

    expression
      = primary-expression
      | postfix-expression
      | array-index-expression
      | function-call-expression
      | field-selector-expression
      | unary-expression
      | cast-expression
      | infix-expression
      | assignment-expression
      ;

    primary-expression = ID | literal | grouped-expression ;
    postfix-expression = expression postfix-operator ;
    postfix-operator = '--' | '++' ;
    array-index-expression = expression '[' expression ']' ;
    function-call-expression = expression '(' argument-list ')' ;
    argument-list = [ expression / ',' ]* ;
    field-selector-expression = expression '.' ID ;
    unary-expression = unary-operator expression ;
    unary-operator = '+' | '-' ;
    cast-expression = '(' type-name ')' expression ;
    infix-expression = [ expression / infix-operator ]2+ ;
    infix-operator = '*' | '/' | '+' | '-' ;
    assignment-expression = expression '=' expression ;
    grouped-expression = '(' expression ')' ;

    type-name = ID ;

    literal
      = BOOLEAN
      | INTEGER_SUFFIX
      | FLOAT
      ;


    leaf BOOLEAN = 'true' | 'false' ;
    leaf INTEGER_SUFFIX = INTEGER INT_SUFFIX? ;
    INT_SUFFIX = "[uU]" "ll|LL" | "[uU]" "[lL]"? |  "ll|LL" "[uU]"? | "[lL]" "[uU]"?  ;
    INTEGER = DECIMAL | HEX | OCTAL | BINARY ;
    DECIMAL = "[1-9][0-9]*" ;
    OCTAL = "0[0-7]*" ;
    HEX = "0[xX][0-9a-fA-F]+" ;
    BINARY = "0[bB][0-1]+" ;

    leaf FLOAT = ("[0-9]*[.][0-9]+" | "[0-9]+[.]") "[eE][+-]?[0-9]+"? "[flFL]"? | "[0-9]+" "[eE][+-]?[0-9]+" "[flFL]" ;

    leaf ID = "[A-Za-z_][A-Za-z0-9_]*" ;

}