/**
 * Copyright (c) 2010 - 2018 committers of YAKINDU and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * Contributors:
 * 	committers of YAKINDU - initial API and implementation
 *
 */
namespace  org.yakindu.stext

grammar Expressions {

    skip WS = "\s+";
   	skip SINGLE_LINE_COMMENT = "/\*[^*]*\*+([^*/][^*]*\*+)*/" ;
   	skip MULTI_LINE_COMMENT = "//[^\n\r]*" ;

    Expression
      = AssignmentExpression
      | ConditionalExpression
      | LogicalExpression
      | InfixExpression
      | PostFixUnaryExpression
      | NumericalUnaryExpression
      | TypeCastExpression
      | PrimaryExpression
      ;

    AssignmentExpression = Expression AssignmentOperator Expression ;
    LogicalExpression = InfixLogicalExpresion | NotLogicalExpresion ;
    InfixLogicalExpresion = [ Expression / logicalOperator ]2+ ;
    NotLogicalExpresion = LogicalNotOperator Expression ;
    InfixExpression = [ Expression / operator ]2+ ;

    logicalOperator = LogicalAndOperator | LogicalOrOperator ;
    operator
        = BitwiseOrOperator | BitwiseXOrOperator | BitwiseAndOperator
        | RelationalOperator | ShiftOperator | AdditiveOperator | MultiplicativeOperator
        ;


    ConditionalExpression = Expression '?' Expression ':' Expression ;
    NumericalUnaryExpression = UnaryOperator Expression ;
    PostFixUnaryExpression = Expression PostFixOperator ;
    TypeCastExpression = Expression 'as' TypeSpecifier ;
    PrimaryExpression
        = PrimitiveValueExpression
        | FeatureCall
	    | ParenthesizedExpression
	    ;

    PrimitiveValueExpression = Literal ;
    FeatureCall = ElementReferenceExpression (
       ( '.' | '.@' ) ID ( ArgumentList |  ArrayIndex+ )?
	   )*
	;

    ArgumentList = '(' [Argument / ',']* ')' ;
    ArrayIndex = '[' Expression ']' ;

    ElementReferenceExpression = ID	('('(Argument (',' Argument)*)?	')' | ('[' Expression ']')  ('[' Expression ']')* )?;

    Argument=(ID '=')?  Expression ;

    ParenthesizedExpression = '(' Expression ')' ;

    TypeSpecifier = QID ('<' (TypeSpecifier (',' TypeSpecifier)*)? '>')?;

    Literal
      = BoolLiteral
      | IntLiteral
      | HexLiteral
      | BinaryLiteral
      | DoubleLiteral
      | FloatLiteral
      | StringLiteral
      | NullLiteral
      ;

    BoolLiteral = BOOL;
    IntLiteral = INT;
    DoubleLiteral = DOUBLE;
    FloatLiteral =FLOAT;
    HexLiteral =HEX;
    BinaryLiteral =BINARY;
    StringLiteral =STRING;
    NullLiteral = 'null';

    leaf LogicalAndOperator = '&&' ;
    leaf LogicalOrOperator  = '||' ;
    leaf LogicalNotOperator = '!' ;
    leaf BitwiseXOrOperator = '^' ;
    leaf BitwiseOrOperator  = '|' ;
    leaf BitwiseAndOperator = '&' ;
    leaf PostFixOperator    = '++' | '--' ;
    leaf AssignmentOperator = '=' | '*='	| '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' ;
    leaf ShiftOperator = '<<' | '>>' ;
    leaf AdditiveOperator = '+' | '-' ;
    leaf MultiplicativeOperator = '*' | '/' | '%';
    leaf UnaryOperator = '+' | '-' | '~';
    leaf RelationalOperator = '<' | '<=' | '>' | '>=' | '==' | '!=' ;

    leaf BOOL = "true|false|yes|no" ;
    leaf HEX  = "0(x|X)[0-9a-fA-F]+" ;
    leaf BINARY  = "0(b|B)[01]+" ;
    DOUBLE = (INT '.' INT) ('e' ('-' | '+') INT)? ('d' | 'D')? ;
    FLOAT = (INT '.' INT) ('e' ('-' | '+') INT)? ('f' | 'F')? ;
    QID = ID ('.' ID)* ;
    leaf INT = "[0-9]+" ;
    leaf ID = "[a-zA-Z_][a-zA-Z_0-9]*" ;
    leaf STRING = DQ_STRING | SQ_STRING ;
    leaf DQ_STRING = "\"(\\?.)*\"";
    leaf SQ_STRING = "'(\\?.)*'" ;
}