State(0-RP(<GOAL>,0,0))
State(1-RP(<GOAL>,0,-1))
State(2-RP(rules,0,-1))
State(3-RP(§rules§multi2,0,-1))
State(4-RP(anyRule,0,-1))
State(5-RP(anyRule,1,-1))
State(6-RP(anyRule,2,-1))
State(7-RP(skipRule,0,-1))
State(8-RP(leafRule,0,-1))
State(9-RP(normalRule,0,-1))
State(10-RP('skip',0,-1))
State(11-RP('leaf',0,-1))
State(12-RP(IDENTIFIER,0,-1))
State(13-RP(normalRule,0,1))
State(14-RP('=',0,-1))
State(15-RP(normalRule,0,2))
State(16-RP(choice,0,-1))
State(17-RP(choice,1,-1))
State(18-RP(priorityChoice,0,-1))
State(19-RP(simpleChoice,0,-1))
State(20-RP(§priorityChoice§sList2,0,-1))
State(21-RP(§priorityChoice§sList2,2,-1))
State(22-RP(§simpleChoice§sList3,0,-1))
State(23-RP(§simpleChoice§sList3,2,-1))
State(24-RP(concatenation,0,-1))
State(25-RP(§empty.§priorityChoice§sList2,0,-1))
State(26-RP(§empty.§simpleChoice§sList3,0,-1))
State(27-RP(§concatenation§multi3,0,-1))
State(28-RP(concatenationItem,0,-1))
State(29-RP(concatenationItem,1,-1))
State(30-RP(concatenationItem,2,-1))
State(31-RP(simpleItem,0,-1))
State(32-RP(simpleItem,1,-1))
State(33-RP(simpleItem,2,-1))
State(34-RP(multi,0,-1))
State(35-RP(separatedList,0,-1))
State(36-RP(terminal,0,-1))
State(37-RP(terminal,1,-1))
State(38-RP(nonTerminal,0,-1))
State(39-RP(group,0,-1))
State(40-RP('[',0,-1))
State(41-RP(LITERAL,0,-1))
State(42-RP(PATTERN,0,-1))
State(43-RP(qualifiedName,0,-1))
State(44-RP('(',0,-1))
State(45-RP(§qualifiedName§sList0,0,-1))
State(46-RP(§qualifiedName§sList0,1,1))
State(47-RP(§qualifiedName§sList0,1,-1))
State(48-RP('.',0,-1))
State(49-RP(multi,0,1))
State(50-RP(multiplicity,0,-1))
State(51-RP(multiplicity,1,-1))
State(52-RP(multiplicity,2,-1))
State(53-RP(multiplicity,3,-1))
State(54-RP(multiplicity,4,-1))
State(55-RP('*',0,-1))
State(56-RP('+',0,-1))
State(57-RP('?',0,-1))
State(58-RP(§multiplicity§choice0,0,-1))
State(59-RP(§multiplicity§choice1,0,-1))
State(60-RP(POSITIVE_INTEGER,0,-1))
State(61-RP(§concatenation§multi3,0,1))
State(62-RP(§priorityChoice§sList2,1,1))
State(63-RP(§simpleChoice§sList3,1,1))
State(64-RP(§priorityChoice§sList2,1,-1))
State(65-RP('<',0,-1))
State(66-RP(§simpleChoice§sList3,1,-1))
State(67-RP('|',0,-1))
State(68-RP(normalRule,0,3))
State(69-RP(';',0,-1))
State(70-RP(§rules§multi2,0,1))
State(71-RP(group,0,1))
State(72-RP(group,0,2))
Transition { State(0-RP(<GOAL>,0,0)) -- WIDTH[IDENTIFIER][null] --> State(10-RP('skip',0,-1)) }
Transition { State(0-RP(<GOAL>,0,0)) -- WIDTH[IDENTIFIER][null] --> State(11-RP('leaf',0,-1)) }
Transition { State(0-RP(<GOAL>,0,0)) -- WIDTH['='][null] --> State(12-RP(IDENTIFIER,0,-1)) }
Transition { State(6-RP(anyRule,2,-1)) -- HEIGHT['skip', 'leaf', IDENTIFIER, <EOT>][RP(§rules§multi2,0,0)] --> State(70-RP(§rules§multi2,0,1)) }
Transition { State(6-RP(anyRule,2,-1)) -- HEIGHT[<EOT>][RP(§rules§multi2,0,0)] --> State(3-RP(§rules§multi2,0,-1)) }
Transition { State(6-RP(anyRule,2,-1)) -- GRAFT['skip', 'leaf', IDENTIFIER, <EOT>][RP(§rules§multi2,0,1)] --> State(70-RP(§rules§multi2,0,1)) }
Transition { State(6-RP(anyRule,2,-1)) -- GRAFT[<EOT>][RP(§rules§multi2,0,1)] --> State(3-RP(§rules§multi2,0,-1)) }
Transition { State(9-RP(normalRule,0,-1)) -- HEIGHT['skip', 'leaf', IDENTIFIER, <EOT>][RP(anyRule,2,0)] --> State(6-RP(anyRule,2,-1)) }
Transition { State(12-RP(IDENTIFIER,0,-1)) -- HEIGHT['.', '[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', '*', '+', '?', POSITIVE_INTEGER, ')'][RP(§qualifiedName§sList0,0,0)] --> State(46-RP(§qualifiedName§sList0,1,1)) }
Transition { State(12-RP(IDENTIFIER,0,-1)) -- HEIGHT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', '*', '+', '?', POSITIVE_INTEGER, ')'][RP(§qualifiedName§sList0,0,0)] --> State(45-RP(§qualifiedName§sList0,0,-1)) }
Transition { State(12-RP(IDENTIFIER,0,-1)) -- HEIGHT['='][RP(normalRule,0,0)] --> State(13-RP(normalRule,0,1)) }
Transition { State(13-RP(normalRule,0,1)) -- WIDTH[§empty.§priorityChoice§sList2, §empty.§simpleChoice§sList3, '[', LITERAL, PATTERN, '(', IDENTIFIER][null] --> State(14-RP('=',0,-1)) }
Transition { State(14-RP('=',0,-1)) -- GRAFT[§empty.§priorityChoice§sList2, §empty.§simpleChoice§sList3, '[', LITERAL, PATTERN, '(', IDENTIFIER][RP(normalRule,0,1)] --> State(15-RP(normalRule,0,2)) }
Transition { State(15-RP(normalRule,0,2)) -- WIDTH[';'][null] --> State(25-RP(§empty.§priorityChoice§sList2,0,-1)) }
Transition { State(15-RP(normalRule,0,2)) -- WIDTH[';'][null] --> State(26-RP(§empty.§simpleChoice§sList3,0,-1)) }
Transition { State(15-RP(normalRule,0,2)) -- WIDTH[LITERAL, PATTERN, '(', IDENTIFIER][null] --> State(40-RP('[',0,-1)) }
Transition { State(15-RP(normalRule,0,2)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', '*', '+', '?', POSITIVE_INTEGER][null] --> State(41-RP(LITERAL,0,-1)) }
Transition { State(15-RP(normalRule,0,2)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', '*', '+', '?', POSITIVE_INTEGER][null] --> State(42-RP(PATTERN,0,-1)) }
Transition { State(15-RP(normalRule,0,2)) -- WIDTH[§empty.§priorityChoice§sList2, §empty.§simpleChoice§sList3, '[', LITERAL, PATTERN, '(', IDENTIFIER][null] --> State(44-RP('(',0,-1)) }
Transition { State(15-RP(normalRule,0,2)) -- WIDTH['.', '[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', '*', '+', '?', POSITIVE_INTEGER][null] --> State(12-RP(IDENTIFIER,0,-1)) }
Transition { State(16-RP(choice,0,-1)) -- GRAFT[';'][RP(normalRule,0,2)] --> State(68-RP(normalRule,0,3)) }
Transition { State(16-RP(choice,0,-1)) -- GRAFT[')'][RP(group,0,1)] --> State(72-RP(group,0,2)) }
Transition { State(17-RP(choice,1,-1)) -- GRAFT[';'][RP(normalRule,0,2)] --> State(68-RP(normalRule,0,3)) }
Transition { State(17-RP(choice,1,-1)) -- GRAFT[')'][RP(group,0,1)] --> State(72-RP(group,0,2)) }
Transition { State(18-RP(priorityChoice,0,-1)) -- HEIGHT[';', ')'][RP(choice,0,0)] --> State(16-RP(choice,0,-1)) }
Transition { State(19-RP(simpleChoice,0,-1)) -- HEIGHT[';', ')'][RP(choice,1,0)] --> State(17-RP(choice,1,-1)) }
Transition { State(20-RP(§priorityChoice§sList2,0,-1)) -- HEIGHT[';', ')'][RP(priorityChoice,0,0)] --> State(18-RP(priorityChoice,0,-1)) }
Transition { State(22-RP(§simpleChoice§sList3,0,-1)) -- HEIGHT[';', ')'][RP(simpleChoice,0,0)] --> State(19-RP(simpleChoice,0,-1)) }
Transition { State(24-RP(concatenation,0,-1)) -- HEIGHT['<', ';', ')'][RP(§priorityChoice§sList2,0,0)] --> State(62-RP(§priorityChoice§sList2,1,1)) }
Transition { State(24-RP(concatenation,0,-1)) -- HEIGHT[';', ')'][RP(§priorityChoice§sList2,0,0)] --> State(20-RP(§priorityChoice§sList2,0,-1)) }
Transition { State(24-RP(concatenation,0,-1)) -- HEIGHT['|', ';', ')'][RP(§simpleChoice§sList3,0,0)] --> State(63-RP(§simpleChoice§sList3,1,1)) }
Transition { State(24-RP(concatenation,0,-1)) -- HEIGHT[';', ')'][RP(§simpleChoice§sList3,0,0)] --> State(22-RP(§simpleChoice§sList3,0,-1)) }
Transition { State(27-RP(§concatenation§multi3,0,-1)) -- HEIGHT['<', ';', '|', ')'][RP(concatenation,0,0)] --> State(24-RP(concatenation,0,-1)) }
Transition { State(28-RP(concatenationItem,0,-1)) -- HEIGHT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', ')'][RP(§concatenation§multi3,0,0)] --> State(61-RP(§concatenation§multi3,0,1)) }
Transition { State(28-RP(concatenationItem,0,-1)) -- HEIGHT['<', ';', '|', ')'][RP(§concatenation§multi3,0,0)] --> State(27-RP(§concatenation§multi3,0,-1)) }
Transition { State(28-RP(concatenationItem,0,-1)) -- GRAFT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', ')'][RP(§concatenation§multi3,0,1)] --> State(61-RP(§concatenation§multi3,0,1)) }
Transition { State(28-RP(concatenationItem,0,-1)) -- GRAFT['<', ';', '|', ')'][RP(§concatenation§multi3,0,1)] --> State(27-RP(§concatenation§multi3,0,-1)) }
Transition { State(29-RP(concatenationItem,1,-1)) -- HEIGHT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', ')'][RP(§concatenation§multi3,0,0)] --> State(61-RP(§concatenation§multi3,0,1)) }
Transition { State(29-RP(concatenationItem,1,-1)) -- HEIGHT['<', ';', '|', ')'][RP(§concatenation§multi3,0,0)] --> State(27-RP(§concatenation§multi3,0,-1)) }
Transition { State(29-RP(concatenationItem,1,-1)) -- GRAFT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', ')'][RP(§concatenation§multi3,0,1)] --> State(61-RP(§concatenation§multi3,0,1)) }
Transition { State(29-RP(concatenationItem,1,-1)) -- GRAFT['<', ';', '|', ')'][RP(§concatenation§multi3,0,1)] --> State(27-RP(§concatenation§multi3,0,-1)) }
Transition { State(32-RP(simpleItem,1,-1)) -- HEIGHT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', ')'][RP(concatenationItem,0,0)] --> State(28-RP(concatenationItem,0,-1)) }
Transition { State(32-RP(simpleItem,1,-1)) -- HEIGHT['*', '+', '?', POSITIVE_INTEGER][RP(multi,0,0)] --> State(49-RP(multi,0,1)) }
Transition { State(34-RP(multi,0,-1)) -- HEIGHT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', ')'][RP(concatenationItem,1,0)] --> State(29-RP(concatenationItem,1,-1)) }
Transition { State(38-RP(nonTerminal,0,-1)) -- HEIGHT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', '*', '+', '?', POSITIVE_INTEGER, ')'][RP(simpleItem,1,0)] --> State(32-RP(simpleItem,1,-1)) }
Transition { State(43-RP(qualifiedName,0,-1)) -- HEIGHT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', '*', '+', '?', POSITIVE_INTEGER, ')'][RP(nonTerminal,0,0)] --> State(38-RP(nonTerminal,0,-1)) }
Transition { State(44-RP('(',0,-1)) -- HEIGHT[§empty.§priorityChoice§sList2, §empty.§simpleChoice§sList3, '[', LITERAL, PATTERN, '(', IDENTIFIER][RP(group,0,0)] --> State(71-RP(group,0,1)) }
Transition { State(45-RP(§qualifiedName§sList0,0,-1)) -- HEIGHT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|', '*', '+', '?', POSITIVE_INTEGER, ')'][RP(qualifiedName,0,0)] --> State(43-RP(qualifiedName,0,-1)) }
Transition { State(46-RP(§qualifiedName§sList0,1,1)) -- WIDTH[IDENTIFIER][null] --> State(48-RP('.',0,-1)) }
Transition { State(49-RP(multi,0,1)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|'][null] --> State(55-RP('*',0,-1)) }
Transition { State(49-RP(multi,0,1)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|'][null] --> State(56-RP('+',0,-1)) }
Transition { State(49-RP(multi,0,1)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|'][null] --> State(57-RP('?',0,-1)) }
Transition { State(49-RP(multi,0,1)) -- WIDTH['+', '..'][null] --> State(60-RP(POSITIVE_INTEGER,0,-1)) }
Transition { State(50-RP(multiplicity,0,-1)) -- GRAFT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|'][RP(multi,0,1)] --> State(34-RP(multi,0,-1)) }
Transition { State(52-RP(multiplicity,2,-1)) -- GRAFT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|'][RP(multi,0,1)] --> State(34-RP(multi,0,-1)) }
Transition { State(55-RP('*',0,-1)) -- HEIGHT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|'][RP(multiplicity,0,0)] --> State(50-RP(multiplicity,0,-1)) }
Transition { State(57-RP('?',0,-1)) -- HEIGHT['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '|'][RP(multiplicity,2,0)] --> State(52-RP(multiplicity,2,-1)) }
Transition { State(61-RP(§concatenation§multi3,0,1)) -- WIDTH[LITERAL, PATTERN, '(', IDENTIFIER][null] --> State(40-RP('[',0,-1)) }
Transition { State(61-RP(§concatenation§multi3,0,1)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '*', '+', '?', POSITIVE_INTEGER, '|'][null] --> State(41-RP(LITERAL,0,-1)) }
Transition { State(61-RP(§concatenation§multi3,0,1)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '*', '+', '?', POSITIVE_INTEGER, '|'][null] --> State(42-RP(PATTERN,0,-1)) }
Transition { State(61-RP(§concatenation§multi3,0,1)) -- WIDTH[§empty.§priorityChoice§sList2, §empty.§simpleChoice§sList3, '[', LITERAL, PATTERN, '(', IDENTIFIER][null] --> State(44-RP('(',0,-1)) }
Transition { State(61-RP(§concatenation§multi3,0,1)) -- WIDTH['.', '[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '*', '+', '?', POSITIVE_INTEGER, '|'][null] --> State(12-RP(IDENTIFIER,0,-1)) }
Transition { State(61-RP(§concatenation§multi3,0,1)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '*', '+', '?', POSITIVE_INTEGER, '|', ')'][null] --> State(41-RP(LITERAL,0,-1)) }
Transition { State(61-RP(§concatenation§multi3,0,1)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '*', '+', '?', POSITIVE_INTEGER, '|', ')'][null] --> State(42-RP(PATTERN,0,-1)) }
Transition { State(61-RP(§concatenation§multi3,0,1)) -- WIDTH['.', '[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ';', '*', '+', '?', POSITIVE_INTEGER, '|', ')'][null] --> State(12-RP(IDENTIFIER,0,-1)) }
Transition { State(62-RP(§priorityChoice§sList2,1,1)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER][null] --> State(65-RP('<',0,-1)) }
Transition { State(63-RP(§simpleChoice§sList3,1,1)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER][null] --> State(67-RP('|',0,-1)) }
Transition { State(68-RP(normalRule,0,3)) -- WIDTH['skip', 'leaf', IDENTIFIER, <EOT>][null] --> State(69-RP(';',0,-1)) }
Transition { State(69-RP(';',0,-1)) -- GRAFT['skip', 'leaf', IDENTIFIER, <EOT>][RP(normalRule,0,3)] --> State(9-RP(normalRule,0,-1)) }
Transition { State(70-RP(§rules§multi2,0,1)) -- WIDTH[IDENTIFIER][null] --> State(10-RP('skip',0,-1)) }
Transition { State(70-RP(§rules§multi2,0,1)) -- WIDTH[IDENTIFIER][null] --> State(11-RP('leaf',0,-1)) }
Transition { State(70-RP(§rules§multi2,0,1)) -- WIDTH['='][null] --> State(12-RP(IDENTIFIER,0,-1)) }
Transition { State(71-RP(group,0,1)) -- WIDTH[')'][null] --> State(25-RP(§empty.§priorityChoice§sList2,0,-1)) }
Transition { State(71-RP(group,0,1)) -- WIDTH[')'][null] --> State(26-RP(§empty.§simpleChoice§sList3,0,-1)) }
Transition { State(71-RP(group,0,1)) -- WIDTH[LITERAL, PATTERN, '(', IDENTIFIER][null] --> State(40-RP('[',0,-1)) }
Transition { State(71-RP(group,0,1)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ')', '|', '*', '+', '?', POSITIVE_INTEGER][null] --> State(41-RP(LITERAL,0,-1)) }
Transition { State(71-RP(group,0,1)) -- WIDTH['[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ')', '|', '*', '+', '?', POSITIVE_INTEGER][null] --> State(42-RP(PATTERN,0,-1)) }
Transition { State(71-RP(group,0,1)) -- WIDTH[§empty.§priorityChoice§sList2, §empty.§simpleChoice§sList3, '[', LITERAL, PATTERN, '(', IDENTIFIER][null] --> State(44-RP('(',0,-1)) }
Transition { State(71-RP(group,0,1)) -- WIDTH['.', '[', LITERAL, PATTERN, '(', IDENTIFIER, '<', ')', '|', '*', '+', '?', POSITIVE_INTEGER][null] --> State(12-RP(IDENTIFIER,0,-1)) }


{"$type":"$OBJECT","$class":"net.akehurst.language.editor.common.messages.MessageProcessorCreate","languageId":"language-grammar","editorId":null,"sessionId":"session2","grammarStr":null}